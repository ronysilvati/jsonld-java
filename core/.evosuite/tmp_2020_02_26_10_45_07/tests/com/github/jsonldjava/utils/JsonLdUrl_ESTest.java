/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:49:12 GMT 2020
 */

package com.github.jsonldjava.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.utils.JsonLdUrl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonLdUrl_ESTest extends JsonLdUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = JsonLdUrl.removeBase((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonLdUrl jsonLdUrl0 = new JsonLdUrl();
      String string0 = JsonLdUrl.removeBase(jsonLdUrl0, ".");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUrl.resolve("", "Ij:SPr+T~B+]l}H-T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 13: Ij:SPr+T~B+]l}H-T
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUrl.removeDotSegments((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.utils.JsonLdUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonLdUrl jsonLdUrl0 = new JsonLdUrl();
      // Undeclared exception!
      try { 
        JsonLdUrl.removeBase(jsonLdUrl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.utils.JsonLdUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JsonLdUrl.removeBase(object0, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.github.jsonldjava.utils.JsonLdUrl
         //
         verifyException("com.github.jsonldjava.utils.JsonLdUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JsonLdUrl.removeDotSegments("..", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JsonLdUrl.removeDotSegments("a]/", false);
      assertEquals("a]/", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JsonLdUrl.removeDotSegments("/^c", true);
      assertEquals("/^c", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUrl.parse("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JsonLdUrl.resolve(")", "cjjMfZ:'Y$R4p");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("", "#.^%>X^Df=%S");
      assertNotNull(string0);
      assertEquals("#.^%>X^Df=%S", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("", "?.i/");
      assertEquals("?.i/", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("cjjMfZ:'Y$R4p/", "4Zd\"ruS&wF.C");
      assertEquals("cjjMfZ:'Y$R4p/4Zd%22ruS&wF.C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("cjjMfZ:KY$4p", "4Zd\"ruS&wF.C");
      assertNotNull(string0);
      assertEquals("cjjMfZ:4Zd%22ruS&wF.C", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("../", "");
      assertEquals("../", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("@\"KFr{)JgdYNb5;cHd", (String) null);
      assertEquals("@\"KFr{)JgdYNb5;cHd", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JsonLdUrl.resolve((String) null, "cjjMfZ:'Y$R4p");
      assertEquals("cjjMfZ:'Y$R4p", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonLdUrl jsonLdUrl0 = new JsonLdUrl();
      String string0 = JsonLdUrl.removeBase(jsonLdUrl0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonLdUrl jsonLdUrl0 = new JsonLdUrl();
      // Undeclared exception!
      try { 
        JsonLdUrl.removeBase(jsonLdUrl0, "//");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonLdUrl jsonLdUrl0 = JsonLdUrl.parse("?/");
      String string0 = JsonLdUrl.removeBase(jsonLdUrl0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JsonLdUrl.resolve("", "../");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = JsonLdUrl.removeDotSegments(".", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = JsonLdUrl.removeDotSegments("..", false);
      assertEquals("..", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUrl.removeBase("rV", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
}
