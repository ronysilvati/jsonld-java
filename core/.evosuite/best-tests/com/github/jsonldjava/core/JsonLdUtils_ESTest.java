/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:47:36 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.core.Context;
import com.github.jsonldjava.core.JsonLdOptions;
import com.github.jsonldjava.core.JsonLdUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.RenderingHints;
import java.text.BreakIterator;
import java.text.DateFormatSymbols;
import java.time.Clock;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonLdUtils_ESTest extends JsonLdUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("!ZktWBDn*M8\"i'ub");
      Context context0 = new Context(jsonLdOptions0);
      boolean boolean0 = JsonLdUtils.isNode(context0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      JsonLdUtils.fillNodesToPrune(dateFormatSymbols0, (Map<String, Object>) null);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Object object0 = JsonLdUtils.removePreserve(context0, (Object) null, jsonLdOptions0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = JsonLdUtils.isString("(q03x5o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Boolean boolean0 = JsonLdUtils.isObject(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      boolean boolean0 = JsonLdUtils.isKeyword(jsonLdOptions0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(0);
      Boolean boolean0 = JsonLdUtils.isArray(vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      Boolean boolean0 = JsonLdUtils.isArray(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isAbsoluteIri("BX@~bN:j=Oi?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) byte0, (Object) byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      context0.put((String) null, (Object) null);
      // Undeclared exception!
      try { 
        JsonLdUtils.pruneBlankNodes(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, jsonLdOptions0);
      // Undeclared exception!
      try { 
        JsonLdUtils.pruneBlankNodes(renderingHints0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.awt.SunHints$Key cannot be cast to java.lang.String
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      Locale locale0 = Locale.CHINESE;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      context0.put("clone", dateFormatSymbols0);
      // Undeclared exception!
      try { 
        JsonLdUtils.mergeValue(context0, "clone", "clone");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DateFormatSymbols cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.isAbsoluteIri((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Properties properties0 = new Properties();
      Float float0 = new Float(2697.29970749);
      properties0.put(float0, locale0);
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      // Undeclared exception!
      try { 
        JsonLdUtils.fillNodesToPrune(properties0, context0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.deepContains((List<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        JsonLdUtils.compareValues((Object) null, bufferCapabilities0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.compareShortestLeast((String) null, "json-ld-1.1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      context0.clear();
      JsonLdUtils.pruneBlankNodes(context0);
      assertTrue(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("Negotiate");
      Context context0 = new Context(jsonLdOptions0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList arrayList1 = (ArrayList)JsonLdUtils.removePreserve(context0, arrayList0, jsonLdOptions0);
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Boolean boolean0 = JsonLdUtils.isList("fiL!RK2-;S5}H>]P");
      assertFalse(boolean0);
      
      Boolean boolean1 = JsonLdUtils.deepCompare((Object) null, (Object) dimension0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Insets insets0 = new Insets(0, (-1), 1682554634, 1466);
      Boolean boolean0 = JsonLdUtils.isList(insets0);
      Object object0 = JsonLdUtils.clone(boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Float float0 = new Float(0.0);
      Object object0 = JsonLdUtils.clone(float0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = JsonLdUtils.clone("Al4ZW}G8bSIj|");
      assertEquals("Al4ZW}G8bSIj|", object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JsonLdUtils.clone((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        JsonLdUtils.clone(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: Class com.github.jsonldjava.core.JsonLdUtils can not access a member of class sun.util.locale.provider.RuleBasedBreakIterator with modifiers \"public\"
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Object object0 = JsonLdUtils.clone(dimension0);
      assertNotSame(object0, dimension0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      // Undeclared exception!
      try { 
        JsonLdUtils.clone(jsonLdOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: 
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = JsonLdUtils.isValue("com.google.common.collect.DiscreteDomain$IntegerDomain");
      IdentityHashMap<String, Object> identityHashMap0 = new IdentityHashMap<String, Object>();
      identityHashMap0.put("f-h5vAA", boolean0);
      boolean boolean1 = JsonLdUtils.isBlankNode(identityHashMap0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IdentityHashMap<String, Object> identityHashMap0 = new IdentityHashMap<String, Object>();
      boolean boolean0 = JsonLdUtils.isBlankNode(identityHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      boolean boolean0 = JsonLdUtils.isBlankNode(breakIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Context context0 = new Context();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      boolean boolean0 = JsonLdUtils.compareValues(context0, imageCapabilities0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(6);
      boolean boolean0 = JsonLdUtils.compareValues(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Byte byte0 = new Byte((byte)20);
      boolean boolean0 = JsonLdUtils.compareValues(byte0, "com.google.common.base.CharMatcher$JavaIsoControl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = JsonLdUtils.compareShortestLeast("(q03x5o", "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = JsonLdUtils.compareShortestLeast("SYSc4b", "ax'3aB(bA-/m.;am");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = JsonLdUtils.compareShortestLeast("@reverse", "@reverse");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.setCompactArrays(jsonLdOptions0.useNamespaces);
      Context context1 = (Context)JsonLdUtils.removePreserve(context0, context0, jsonLdOptions0);
      assertEquals(1, context1.size());
      assertNotNull(context1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Point point0 = new Point((-2509), (-119));
      JsonLdUtils.mergeValue(context0, "json-ld-1.0", point0);
      JsonLdUtils.removePreserve(context0, context0, jsonLdOptions0);
      assertEquals(2, context0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isRelativeIri("BX@~bN:j=Oi?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Properties properties0 = new Properties();
      properties0.put(byte0, byte0);
      boolean boolean0 = JsonLdUtils.isNodeReference(properties0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      boolean boolean0 = JsonLdUtils.isNodeReference(treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isNode((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Byte byte0 = new Byte((byte)20);
      JsonLdUtils.laxMergeValue(hashtable0, "com.google.common.base.CharMatcher$JavaIsoControl", byte0);
      assertEquals(1, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BiFunction<Object, Object, MockDateFormat> biFunction0 = (BiFunction<Object, Object, MockDateFormat>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.merge("com.google.common.base.CharMatcher$JavaIsoControl", stack0, biFunction0);
      Byte byte0 = new Byte((byte)20);
      JsonLdUtils.laxMergeValue(hashtable0, "com.google.common.base.CharMatcher$JavaIsoControl", byte0);
      assertEquals(1, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdUtils.laxMergeValue((Map<String, Object>) null, "\u30C9\u30A4\u30C4\u8A9E (\u30C9\u30A4\u30C4)", jsonLdOptions0);
      assertNull(jsonLdOptions0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        JsonLdUtils.laxMergeValue(hashtable0, (String) null, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Context context0 = new Context();
      Point point0 = new Point((-2509), (-119));
      JsonLdUtils.mergeValue(context0, "json-ld-1.0", point0);
      JsonLdUtils.pruneBlankNodes(context0);
      assertEquals(2, context0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonLdUtils.mergeValue((Map<String, Object>) null, "rDQab@nKjDp", (Object) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context((Map<String, Object>) treeMap0, jsonLdOptions0);
      JsonLdUtils.mergeValue(context0, "", context0);
      assertEquals(2, context0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "@container");
      boolean boolean0 = JsonLdUtils.deepContains(linkedList0, "@container");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) imageCapabilities0);
      boolean boolean0 = JsonLdUtils.deepContains(stack0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Boolean boolean0 = JsonLdUtils.isObject(dateFormatSymbols0);
      Boolean boolean1 = JsonLdUtils.deepCompare((Object) stack0, (Object) stack0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context((Map<String, Object>) treeMap0, jsonLdOptions0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) context0, (Object) locale0, (Boolean) true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) dimension0, (Object) null, (Boolean) true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = JsonLdUtils.deepCompare((Object) null, (Object) null, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) null, (Object) "I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isRelativeIri("@reverse");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      String string0 = context0.expandIri("@language", (boolean) jsonLdOptions0.useNamespaces, (boolean) jsonLdOptions0.useNamespaces, (Map<String, Object>) null, hashMap0);
      assertEquals("@language", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isRelativeIri("v<0}=\"_tq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.isRelativeIri((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonLdUtils jsonLdUtils0 = new JsonLdUtils();
      Stack<Object> stack0 = new Stack<Object>();
      boolean boolean0 = JsonLdUtils.deepContains(stack0, jsonLdUtils0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Short short0 = new Short((short)245);
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) stack0, (Object) short0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isAbsoluteIri("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      Boolean boolean0 = JsonLdUtils.isString(byte0);
      boolean boolean1 = JsonLdUtils.isNodeReference(boolean0);
      assertFalse(boolean1);
  }
}
