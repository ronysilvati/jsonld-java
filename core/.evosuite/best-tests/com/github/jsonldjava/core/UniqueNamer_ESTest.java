/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:53:32 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.jsonldjava.core.UniqueNamer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UniqueNamer_ESTest extends UniqueNamer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      String string0 = uniqueNamer0.getName("");
      assertEquals("0", string0);
      
      Map<String, String> map0 = uniqueNamer0.existing();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer((String) null);
      String string0 = uniqueNamer0.getName((String) null);
      assertNotNull(string0);
      assertEquals("null0", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      String string0 = uniqueNamer0.getName("");
      assertEquals("0", string0);
      
      Boolean boolean0 = uniqueNamer0.isNamed("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      Boolean boolean0 = uniqueNamer0.isNamed("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      String string0 = uniqueNamer0.getName("");
      assertEquals("0", string0);
      
      String string1 = uniqueNamer0.getName("");
      assertNotNull(string1);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      String string0 = uniqueNamer0.getName();
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      Map<String, String> map0 = uniqueNamer0.existing();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UniqueNamer uniqueNamer0 = new UniqueNamer("");
      UniqueNamer uniqueNamer1 = uniqueNamer0.clone();
      assertNotSame(uniqueNamer1, uniqueNamer0);
  }
}
