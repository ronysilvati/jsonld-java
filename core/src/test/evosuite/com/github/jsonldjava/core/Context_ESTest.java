/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:49:12 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.core.Context;
import com.github.jsonldjava.core.JsonLdOptions;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Context_ESTest extends Context_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = new Context();
      context0.getInverse();
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)context0.expandValue("B`zL; Ktj|4", "(Gf0OT{XukP &ku* ");
      assertEquals(1, linkedHashMap0.size());
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = new Context();
      context0.getInverse();
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)context0.expandValue("I|2]G\"V1SE>rP4", context0);
      assertFalse(linkedHashMap0.isEmpty());
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      context0.getInverse();
      Boolean boolean0 = context0.isReverseProperty("");
      assertFalse(boolean0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context context0 = new Context();
      context0.getInverse();
      String string0 = context0.getContainer("");
      assertNull(string0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      context0.merge("Q2U+]to\"=FX1P3<Kj", jsonLdOptions0, biFunction0);
      context0.compactValue("Q2U+]to\"=FX1P3<Kj", context0);
      assertEquals(2, context0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      Context context0 = new Context(jsonLdOptions0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
      Context context1 = context0.parse((Object) context0, list0);
      assertTrue(context0.isEmpty());
      assertNotSame(context1, context0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Context context1 = context0.clone();
      context1.inverse = (Map<String, Object>) context0;
      Map<String, Object> map0 = context1.getInverse();
      assertNotSame(context1, map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      String string0 = context0.expandIri("", true, true, context0, hashMap0);
      assertEquals(1, context0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = new Context();
      context0.compactIri((String) null, true);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      context0.compactIri("", false);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      context0.compactIri("&G.Sb", (Object) null, true, false);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = new Context();
      Object object0 = new Object();
      context0.compactIri("", object0, false, false);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      context0.compactIri((String) null);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      String string0 = context0.compactIri("");
      assertNotNull(string0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(1, context0.size());
      
      context0.clear();
      Context context1 = context0.clone();
      assertNotSame(context0, context1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Context context0 = new Context(hashMap0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      hashMap0.put((String) null, "null");
      // Undeclared exception!
      try { 
        context0.parse((Object) hashMap0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.parse((Object) "ECGcenD$LI|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 10: ECGcenD$LI|
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("@value");
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      try { 
        context0.expandIri("resulting IRI mapping should be a keyword, absolute IRI or blank node", (boolean) jsonLdOptions0.useNamespaces, true, context0, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid IRI mapping: java.lang.String@0000000006
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      // Undeclared exception!
      try { 
        context0.expandIri("68f5k{&E#@6${6`7lD", true, true, context0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: 68f5k{&E#@6${6`7lD
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      // Undeclared exception!
      try { 
        context0.compactValue("@container must be either @list, @set, @index, or @language", (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        Context._iriCompactionStep5point4((String) null, "", "should never be called", (String) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      Context context0 = null;
      try {
        context0 = new Context((Map<String, Object>) null, jsonLdOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      Context context0 = null;
      try {
        context0 = new Context(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid term definition: java.lang.String@0000000001
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = null;
      try {
        context0 = new Context((JsonLdOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = new Context();
      context0.getLanguageMapping("");
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = new Context();
      context0.getTypeMapping("Q'jTU6XJ7Z");
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      jsonLdOptions0.setBase("|bbF%eZ$ ");
      Map<String, Object> map0 = context0.serialize();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Map<String, Object> map0 = context0.serialize();
      assertFalse(context0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = new Context();
      assertFalse(context0.isEmpty());
      
      context0.clear();
      Map<String, Object> map0 = context0.serialize();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = new Context();
      String string0 = context0.getContainer("@language");
      assertEquals("@language", string0);
      assertNotNull(string0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = new Context();
      context0.getContainer((String) null);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Map<String, String> map0 = context0.getPrefixes(true);
      assertEquals(1, context0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("HTTP client exec chain");
      Context context0 = new Context(jsonLdOptions0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      BiFunction<Object, Object, Context> biFunction0 = (BiFunction<Object, Object, Context>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      context0.merge("json-ld-1.0", locale_Category0, biFunction0);
      // Undeclared exception!
      try { 
        Context._iriCompactionStep5point4((String) null, "czA<`_", "json-ld-1.0", "json-ld-1.0", context0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale$Category cannot be cast to java.util.Map
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Context context0 = new Context();
      String string0 = Context._iriCompactionStep5point4("@reverse", "@reverse", "@reverse", "", context0);
      assertEquals("", string0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = new Context();
      String string0 = Context._iriCompactionStep5point4("7I[:A[0(31O", (Object) null, "+gA;", "ypd*p^2t=/*)7E-", context0);
      assertEquals(1, context0.size());
      assertEquals("+gA;", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = new Context();
      Context._iriCompactionStep5point4((String) null, context0, (String) null, (String) null, context0);
      assertEquals(1, context0.size());
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("@value");
      context0.compactIri((String) null, jsonLdOptions0.useNamespaces, true, true);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      String string0 = context0.expandIri("com.google.common.base.CharMatcher$Whitespace", true, true, context0, hashMap0);
      assertNotNull(string0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      context0.expandIri("[0x", false, false, (Map<String, Object>) null, hashMap0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      context0.expandIri("@value", true, true, context0, hashMap0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      Context context0 = new Context(jsonLdOptions0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      context0.expandIri((String) null, false, (boolean) jsonLdOptions0.useNamespaces, context0, hashMap0);
      assertTrue(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Context context0 = new Context(hashMap0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      hashMap0.put(" xpL=]<*", "null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      try { 
        context0.parse((Object) hashMap0, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid IRI mapping: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context((Map<String, Object>) hashMap0, jsonLdOptions0);
      Integer integer0 = new Integer(1019);
      hashMap0.put("J0(k", integer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      try { 
        context0.parse((Object) hashMap0, (List<String>) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid term definition: java.lang.Integer@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Context context0 = new Context(hashMap0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      hashMap0.put(" xpL=]<*", " xpL=]<*");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      try { 
        context0.parse((Object) hashMap0, list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid IRI mapping: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Context context0 = new Context();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      context0.merge("", context0, biFunction0);
      try { 
        context0.parse((Object) context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid term definition: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = context0.expandValue((String) null, locale_Category0);
      try { 
        context0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // keyword redefinition: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Context context0 = new Context();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      context0.replaceAll(biFunction0);
      Context context1 = context0.parse((Object) context0);
      assertFalse(context0.isEmpty());
      assertEquals(0, context1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Context context0 = new Context();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        context0.parse((Object) locale_Category0, (List<String>) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid local context: java.util.Locale$Category@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Context context0 = new Context();
      Stack<String> stack0 = new Stack<String>();
      try { 
        context0.parse((Object) "*!", (List<String>) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // loading remote context failed: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.DocumentLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        context0.parse((Object) "B`zL; Ktj|4", (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 1: B`zL; Ktj|4
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Map<String, Object> map0 = context0.getInverse();
      Context context1 = context0.parse((Object) map0);
      assertEquals(1, context1.size());
      assertNotSame(context1, context0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Context context0 = new Context();
      Stack<String> stack0 = new Stack<String>();
      Context context1 = context0.parse((Object) stack0, (List<String>) stack0);
      assertNotSame(context1, context0);
      assertEquals(1, context1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Context context0 = new Context();
      Context context1 = context0.parse((Object) null, (List<String>) null);
      assertFalse(context1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Context context0 = new Context();
      Map<String, Object> map0 = context0.getInverse();
      Object object0 = context0.compactValue("", map0);
      assertNotNull(object0);
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Context context0 = new Context();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      context0.merge("com.google.common.base.Converter$ConverterCompositio9", context0, biFunction0);
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      context0.merge("6L?V]", "ZM", biFunction1);
      context0.compactValue("", context0);
      assertEquals(3, context0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      Object object0 = context0.compactValue((String) null, context0);
      assertNull(object0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context1 = new Context((Object) context0, jsonLdOptions0);
      assertEquals(1, context1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = null;
      try {
        context0 = new Context(object0, jsonLdOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      context0.getTermDefinition("Czd7}+B1W*B}*");
      assertEquals(1, context0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      try { 
        context0.parse((Object) context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid base IRI: java.lang.String@0000000004
         //
         verifyException("com.github.jsonldjava.core.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      String string0 = context0.compactIri("iS>)AX+rOY(^;[:5", true);
      assertNotNull(string0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Context context0 = new Context();
      String string0 = context0.compactIri("expected value of @id to be a string");
      assertNotNull(string0);
      assertFalse(context0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Context context0 = null;
      try {
        context0 = new Context((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
