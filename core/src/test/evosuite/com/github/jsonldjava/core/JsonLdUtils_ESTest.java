/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:47:36 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.core.Context;
import com.github.jsonldjava.core.JsonLdOptions;
import com.github.jsonldjava.core.JsonLdUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.RenderingHints;
import java.text.BreakIterator;
import java.text.DateFormatSymbols;
import java.time.Clock;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonLdUtils_ESTest extends JsonLdUtils_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Dentro de um timeout de 4 segundos, cria um novo 
   * nó de JsonLD e em seguida verifica se a instancia realmente
   * é um nó.
   * ATENÇÃO: Como todos os testes estão trabalhando com um time-
   * out de 4 segundos, na descrição dos próximos testes 
   * não será informado sobre o timeout, para evitar redundância.
   * ----------------------------------------------------------
  */	
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("!ZktWBDn*M8\"i'ub");
      Context context0 = new Context(jsonLdOptions0);
      boolean boolean0 = JsonLdUtils.isNode(context0);
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Em partes
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Talvez
   * ----------------------------------------------------------
   * DESCRIÇÃO: Cria um novo instância de DateFormatSymbols, 
   * em seguida faz a poda de nós nulos e em seguida verifica
   * se a chamada ao método getLocalPatternChars retorna um
   * valor esperado.
   * ----------------------------------------------------------
  */	
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      JsonLdUtils.fillNodesToPrune(dateFormatSymbols0, (Map<String, Object>) null);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método removePreserve funciona
   * corretamente ao passar um input null
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Object object0 = JsonLdUtils.removePreserve(context0, (Object) null, jsonLdOptions0);
      assertNull(object0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isString funciona
   * corretamente ao verificar se o parâmetro passado é uma string
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = JsonLdUtils.isString("(q03x5o");
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isObject funciona
   * corretamente ao verificar se o parâmetro passado é um objeto
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Boolean boolean0 = JsonLdUtils.isObject(linkedHashMap0);
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isKeyword funciona
   * corretamente ao verificar se o parâmetro passado é um objeto
   * que contém keywords (tipo @base e @container)
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      boolean boolean0 = JsonLdUtils.isKeyword(jsonLdOptions0);
      assertFalse(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isArray funciona
   * corretamente ao verificar se o parâmetro passado é um vetor
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(0);
      Boolean boolean0 = JsonLdUtils.isArray(vector0);
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isArray funciona
   * corretamente ao verificar se o parâmetro passado é um vetor
   * (quando passando um objeto de tipo diferente)
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      Boolean boolean0 = JsonLdUtils.isArray(minguoDate0);
      assertFalse(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isAbsoluteIri funciona
   * corretamente ao verificar se o parâmetro passado é realmente
   * uma Iri
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isAbsoluteIri("BX@~bN:j=Oi?");
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método deepCompare funciona
   * corretamente ao fazer uma comparação profunda entre objetos
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = JsonLdUtils.deepCompare((Object) byte0, (Object) byte0);
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método pruneBlankNodes gera
   * uma nullPointerException ao tentar podar um objeto
   * que contém chave nula   * 
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      context0.put((String) null, (Object) null);
      // Undeclared exception!
      try { 
        JsonLdUtils.pruneBlankNodes(context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
  
  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não sei informar
   * ----------------------------------------------------------
   * DESCRIÇÃO: Não consegui compreender a real importância do
   * método nem seu funcionamento. Dessa forma, defini que o
   * teste não é compreensível. Não pela forma que está montado,
   * mas pela falta de entendimento do próprio método a ser
   * testado.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, jsonLdOptions0);
      // Undeclared exception!
      try { 
        JsonLdUtils.pruneBlankNodes(renderingHints0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.awt.SunHints$Key cannot be cast to java.lang.String
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método mergeValue gera uma exceção
   * ao tentar efetuar o merge de uma string e não de um objeto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      Locale locale0 = Locale.CHINESE;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      context0.put("clone", dateFormatSymbols0);
      // Undeclared exception!
      try { 
        JsonLdUtils.mergeValue(context0, "clone", "clone");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DateFormatSymbols cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isAbsoluteIri gera uma exceção
   * ao tentar verificar uma string nula.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.isAbsoluteIri((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método fillNodesToPrune gera uma exceção
   * ao tentar passar uma entrada contendo um float como chave ao invés
   * de uma string.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Properties properties0 = new Properties();
      Float float0 = new Float(2697.29970749);
      properties0.put(float0, locale0);
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Context context0 = new Context(jsonLdOptions0);
      // Undeclared exception!
      try { 
        JsonLdUtils.fillNodesToPrune(properties0, context0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método deepContains gera uma exceção
   * ao tentar comparar dois objetos nulos
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.deepContains((List<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método compareValues gera uma exceção
   * ao tentar comparar dois objetos sendo um deles nulo.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        JsonLdUtils.compareValues((Object) null, bufferCapabilities0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método compareShortestLeast gera uma exceção
   * ao tentar comparar duas strings sendo uma delas nula.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonLdUtils.compareShortestLeast((String) null, "json-ld-1.1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método pruneBlankNodes se comporta
   * corretamente ao tentar podar nós de um novo contexto
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      context0.clear();
      JsonLdUtils.pruneBlankNodes(context0);
      assertTrue(context0.isEmpty());
  }

  /**
   * COMPREENSÍVEL: Relativamente compreensivel
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não consegui entender o contexto.
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método removePreserve se comporta
   * corretamente ao tentar podar nós de um novo contexto
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("Negotiate");
      Context context0 = new Context(jsonLdOptions0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList arrayList1 = (ArrayList)JsonLdUtils.removePreserve(context0, arrayList0, jsonLdOptions0);
      assertEquals(0, arrayList1.size());
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Iniciamente o método isList verifica se uma 
   * string realmente não é list. Num segundo momento, o método
   * deepCompare verifica se um objeto nulo e um objeto
   * instancia de Dimension realmente são diferentes.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Boolean boolean0 = JsonLdUtils.isList("fiL!RK2-;S5}H>]P");
      assertFalse(boolean0);
      
      Boolean boolean1 = JsonLdUtils.deepCompare((Object) null, (Object) dimension0, boolean0);
      assertFalse(boolean1);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método clone realmente pode 
   * funciona como esperado e num segundo momento verifica
   * se o objeto clone e o original realmente são diferentes.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Insets insets0 = new Insets(0, (-1), 1682554634, 1466);
      Boolean boolean0 = JsonLdUtils.isList(insets0);
      Object object0 = JsonLdUtils.clone(boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não, pois um teste anterior já
   * atende às necessidades.
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método clone realmente pode 
   * funciona como esperado.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = JsonLdUtils.clone("Al4ZW}G8bSIj|");
      assertEquals("Al4ZW}G8bSIj|", object0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método clone realmente pode 
   * funciona como esperado ao clonar um objeto nulo
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JsonLdUtils.clone((Object) null);
      assertNull(object0);
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Não, um teste anterior já resolve.
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método clone realmente pode 
   * funciona como esperado ao clonar um objeto instancia de Dimension
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Object object0 = JsonLdUtils.clone(dimension0);
      assertNotSame(object0, dimension0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método clone realmente 
   * gera uma exceção ao tentar clonar uma instancia de JsonLdOptions
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      // Undeclared exception!
      try { 
        JsonLdUtils.clone(jsonLdOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: 
         //
         verifyException("com.github.jsonldjava.core.JsonLdUtils", e);
      }
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isBlankNode realmente 
   * se comporta como esperado ao verificar se uma instancia de
   * IdentityHashMap sem nós, realmente é um nó em branco.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IdentityHashMap<String, Object> identityHashMap0 = new IdentityHashMap<String, Object>();
      boolean boolean0 = JsonLdUtils.isBlankNode(identityHashMap0);
      assertTrue(boolean0);
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método compareValues realmente 
   * se comporta como esperado ao comparar dois inteiros
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(6);
      boolean boolean0 = JsonLdUtils.compareValues(integer0, integer0);
      assertTrue(boolean0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método compareValues realmente 
   * se comporta como esperado ao comparar uma string
   * e uma instancia de Byte
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Byte byte0 = new Byte((byte)20);
      boolean boolean0 = JsonLdUtils.compareValues(byte0, "com.google.common.base.CharMatcher$JavaIsoControl");
      assertFalse(boolean0);
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método isAbsoluteIri realmente 
   * se comporta como esperado ao verificar uma string vazia
   * como parâmetro.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = JsonLdUtils.isAbsoluteIri("");
      assertFalse(boolean0);
  }

  // Um total de 65 Testes foram gerados. Alguns testes foram omitidos.
}
