/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:52:27 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.core.DocumentLoader;
import com.github.jsonldjava.core.JsonLdConsts;
import com.github.jsonldjava.core.JsonLdOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonLdOptions_ESTest extends JsonLdOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.getOmitGraph();
      // Undeclared exception!
      try { 
        jsonLdOptions0.setEmbed((JsonLdConsts.Embed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.useNamespaces = jsonLdOptions1.useNamespaces;
      jsonLdOptions1.setEmbed("@link");
      JsonLdOptions jsonLdOptions2 = new JsonLdOptions("json-ld-1.1");
      Boolean boolean0 = jsonLdOptions2.useNamespaces;
      jsonLdOptions1.setUseRdfType(boolean0);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions2.outputForm = "json-ld-1.0";
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions2.copy();
      jsonLdOptions0.copy();
      JsonLdConsts.Embed jsonLdConsts_Embed1 = JsonLdConsts.Embed.LINK;
      JsonLdOptions jsonLdOptions3 = new JsonLdOptions((String) null);
      jsonLdOptions3.getExplicit();
      // Undeclared exception!
      try { 
        jsonLdOptions2.setProduceGeneralizedRdf((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("json-ld-1.1");
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setEmbed(boolean0);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setProcessingMode("json-ld-1.1");
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.setBase("@never");
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getAllowContainerSetOnType();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions1.getRequireAll();
      jsonLdOptions0.setEmbed(boolean0);
      jsonLdOptions1.setEmbed("@last");
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      jsonLdOptions1.setExpandContext(boolean0);
      jsonLdOptions2.getAllowContainerSetOnType();
      try { 
        jsonLdOptions1.setEmbed("b*f(5AT!I?GCC1S`n9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("C'lB,BfCIIX[N!E");
      Boolean boolean0 = jsonLdOptions0.useNamespaces;
      jsonLdOptions0.setUseNativeTypes(boolean0);
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.setCompactArrays((Boolean) null);
      jsonLdOptions0.outputForm = "C'lB,BfCIIX[N!E";
      jsonLdOptions0.getAllowContainerSetOnType();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.setExpandContext("@last");
      jsonLdOptions0.setProcessingMode("@last");
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setProcessingMode("@last");
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setProcessingMode("com.github.jsonldjava.disallowRemoteContextLoading");
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getDocumentLoader();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.getProcessingMode();
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      jsonLdOptions2.useNativeTypes = (Boolean) true;
      jsonLdOptions1.getEmbedVal();
      jsonLdOptions1.getDocumentLoader();
      jsonLdOptions2.getProcessingMode();
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions1.getEmbedVal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      Boolean boolean0 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.useRdfType = boolean0;
      jsonLdOptions0.useNamespaces = boolean0;
      jsonLdOptions0.outputForm = "";
      jsonLdOptions0.setProcessingMode("");
      Boolean boolean1 = jsonLdOptions0.useNamespaces;
      jsonLdOptions0.setAllowContainerSetOnType(boolean1);
      Boolean boolean2 = jsonLdOptions0.getRequireAll();
      jsonLdOptions0.setUseRdfType(boolean2);
      jsonLdOptions0.outputForm = null;
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setEmbed(boolean2);
      Boolean boolean3 = jsonLdOptions0.useNamespaces;
      jsonLdOptions1.setAllowContainerSetOnType(boolean3);
      jsonLdOptions0.getOmitDefault();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.setExpandContext(boolean3);
      Boolean boolean4 = jsonLdOptions1.useNativeTypes;
      jsonLdOptions1.setPruneBlankNodeIdentifiers(boolean4);
      jsonLdOptions0.setCompactArrays(boolean2);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getBase();
      jsonLdOptions1.setProcessingMode("");
      jsonLdOptions1.getProcessingMode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.ALWAYS;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setBase("G4BoWM");
      jsonLdOptions0.setExpandContext((Object) null);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions1.useNativeTypes;
      Boolean boolean1 = jsonLdOptions1.getUseRdfType();
      jsonLdOptions0.setEmbed(boolean1);
      jsonLdOptions0.setRequireAll(boolean0);
      jsonLdOptions1.setPruneBlankNodeIdentifiers((Boolean) true);
      jsonLdOptions1.setFrameExpansion((Boolean) true);
      jsonLdOptions1.getBase();
      jsonLdOptions1.getProduceGeneralizedRdf();
      JsonLdOptions jsonLdOptions2 = new JsonLdOptions("json-ld-1.0");
      JsonLdOptions jsonLdOptions3 = jsonLdOptions1.copy();
      Boolean boolean2 = jsonLdOptions2.useNativeTypes;
      jsonLdOptions1.setRequireAll(boolean2);
      jsonLdOptions2.setUseRdfType(jsonLdOptions0.useNamespaces);
      jsonLdOptions2.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.getExplicit();
      jsonLdOptions0.getCompactArrays();
      JsonLdConsts.Embed jsonLdConsts_Embed1 = JsonLdConsts.Embed.NEVER;
      Boolean boolean3 = jsonLdOptions2.useNamespaces;
      jsonLdOptions0.setUseNativeTypes(boolean3);
      jsonLdOptions3.setEmbed(jsonLdConsts_Embed1);
      jsonLdOptions2.getOmitDefault();
      jsonLdOptions3.copy();
      jsonLdOptions2.setAllowContainerSetOnType(boolean1);
      jsonLdOptions1.getPruneBlankNodeIdentifiers();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("HYW>VWxthlt6!z^2)<");
      Boolean boolean0 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.setExpandContext(boolean0);
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.useNamespaces = boolean0;
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setProcessingMode("");
      jsonLdOptions1.setOmitDefault((Boolean) true);
      Object object0 = jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setExpandContext(object0);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getEmbed();
      jsonLdOptions1.setExpandContext("HYW>VWxthlt6!z^2)<");
      jsonLdOptions1.getEmbed();
      jsonLdOptions1.getOmitDefault();
      // Undeclared exception!
      try { 
        jsonLdOptions0.setEmbed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      jsonLdOptions0.setBase("{\"Fk(YN,(g?m");
      jsonLdOptions0.getExpandContext();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setProduceGeneralizedRdf((Boolean) true);
      Boolean boolean0 = jsonLdOptions1.getCompactArrays();
      jsonLdOptions1.setRequireAll((Boolean) true);
      jsonLdOptions0.setAllowContainerSetOnType(boolean0);
      jsonLdOptions0.setProcessingMode("");
      Boolean boolean1 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setCompactArrays(boolean1);
      DocumentLoader documentLoader1 = jsonLdOptions1.getDocumentLoader();
      jsonLdOptions1.setDocumentLoader(documentLoader1);
      jsonLdOptions1.getProduceGeneralizedRdf();
      Boolean boolean2 = jsonLdOptions1.getOmitGraph();
      jsonLdOptions0.getFrameExpansion();
      jsonLdOptions1.getEmbed();
      Boolean boolean3 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions1.setEmbed(boolean3);
      jsonLdOptions0.setProcessingMode("");
      jsonLdOptions0.setPruneBlankNodeIdentifiers((Boolean) true);
      jsonLdOptions0.getOmitDefault();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LAST;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.getBase();
      jsonLdOptions1.getProcessingMode();
      jsonLdOptions1.setBase("");
      Boolean boolean4 = jsonLdOptions1.getRequireAll();
      jsonLdOptions1.setOmitGraph(boolean4);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.getExpandContext();
      jsonLdOptions1.setExpandContext((Object) null);
      jsonLdOptions1.getEmbed();
      jsonLdOptions1.setOmitGraph(boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      JsonLdOptions jsonLdOptions2 = jsonLdOptions1.copy();
      Boolean boolean0 = jsonLdOptions1.getCompactArrays();
      Boolean boolean1 = jsonLdOptions2.useRdfType;
      jsonLdOptions0.setUseNativeTypes(boolean1);
      JsonLdOptions jsonLdOptions3 = new JsonLdOptions();
      jsonLdOptions3.getOmitDefault();
      jsonLdOptions0.setOmitDefault((Boolean) null);
      jsonLdOptions0.setFrameExpansion(jsonLdOptions2.useNamespaces);
      jsonLdOptions2.setUseNativeTypes(boolean0);
      Boolean boolean2 = jsonLdOptions2.getFrameExpansion();
      jsonLdOptions0.setUseRdfType(boolean2);
      jsonLdOptions2.getExplicit();
      jsonLdOptions2.setProduceGeneralizedRdf((Boolean) true);
      jsonLdOptions3.setRequireAll(boolean1);
      jsonLdOptions1.format = "invalid input";
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions1.getRequireAll();
      jsonLdOptions2.getUseNativeTypes();
      Boolean boolean3 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions1.setProduceGeneralizedRdf(boolean3);
      jsonLdOptions3.getFrameExpansion();
      jsonLdOptions1.getUseNativeTypes();
      jsonLdOptions1.getEmbedVal();
      jsonLdOptions1.getAllowContainerSetOnType();
      Boolean boolean4 = jsonLdOptions3.useNamespaces;
      jsonLdOptions3.setCompactArrays(boolean4);
      jsonLdOptions2.getProduceGeneralizedRdf();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions1.getRequireAll();
      jsonLdOptions3.getExplicit();
      jsonLdOptions2.getPruneBlankNodeIdentifiers();
      jsonLdOptions3.getUseNativeTypes();
      jsonLdOptions1.getExplicit();
      jsonLdOptions2.setCompactArrays((Boolean) null);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("MgfxC0");
      jsonLdOptions0.format = "MgfxC0";
      JsonLdOptions jsonLdOptions1 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions1.getUseNativeTypes();
      jsonLdOptions0.setRequireAll(boolean0);
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      Boolean boolean1 = jsonLdOptions2.getPruneBlankNodeIdentifiers();
      jsonLdOptions2.setExpandContext(boolean1);
      Boolean boolean2 = jsonLdOptions2.getFrameExpansion();
      jsonLdOptions0.setUseNativeTypes(boolean2);
      Boolean boolean3 = jsonLdOptions1.getFrameExpansion();
      jsonLdOptions1.setRequireAll(boolean3);
      jsonLdOptions2.setFrameExpansion((Boolean) true);
      jsonLdOptions2.setExplicit((Boolean) true);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.setOmitGraph(boolean0);
      jsonLdOptions2.outputForm = "4gvmjwY";
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setExpandContext(boolean2);
      jsonLdOptions2.setOmitDefault(boolean0);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getProduceGeneralizedRdf();
      jsonLdOptions2.setUseRdfType((Boolean) true);
      jsonLdOptions1.setAllowContainerSetOnType((Boolean) true);
      JsonLdConsts.Embed jsonLdConsts_Embed1 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed1);
      try { 
        jsonLdOptions1.setEmbed("MgfxC0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions1.setFrameExpansion(boolean0);
      DocumentLoader documentLoader0 = jsonLdOptions1.getDocumentLoader();
      jsonLdOptions1.setDocumentLoader(documentLoader0);
      Boolean boolean1 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setEmbed(boolean1);
      Boolean boolean2 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions1.setProcessingMode("com.github.jsonldjava.disallowRemoteContextLoading");
      jsonLdOptions0.setAllowContainerSetOnType(boolean2);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LAST;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setRequireAll((Boolean) null);
      Boolean boolean3 = jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions1.setExplicit(boolean0);
      jsonLdOptions0.setOmitGraph(boolean2);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setFrameExpansion(boolean1);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      Boolean boolean4 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setUseNativeTypes(boolean4);
      jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.getRequireAll();
      jsonLdOptions1.setEmbed(boolean3);
      jsonLdOptions1.getUseRdfType();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "fT~:tw";
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("fT~:tw");
      jsonLdOptions0.setBase("fT~:tw");
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setCompactArrays(boolean0);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getOmitGraph();
      Boolean boolean1 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      jsonLdOptions1.setRequireAll(boolean1);
      jsonLdOptions0.getProduceGeneralizedRdf();
      Boolean boolean2 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions1.setPruneBlankNodeIdentifiers(boolean2);
      jsonLdOptions1.setProduceGeneralizedRdf((Boolean) true);
      jsonLdOptions0.setExplicit(boolean2);
      JsonLdOptions jsonLdOptions2 = jsonLdOptions1.copy();
      jsonLdOptions1.getExplicit();
      jsonLdOptions2.useRdfType = null;
      jsonLdOptions1.setBase("com.github.jsonldjava.core.JsonLdOptions");
      jsonLdOptions1.getBase();
      jsonLdOptions2.getUseNativeTypes();
      jsonLdOptions0.setFrameExpansion(boolean2);
      jsonLdOptions1.setFrameExpansion(boolean1);
      DocumentLoader documentLoader0 = jsonLdOptions1.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      jsonLdOptions1.setDocumentLoader((DocumentLoader) null);
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions2.getPruneBlankNodeIdentifiers();
      try { 
        jsonLdOptions2.setEmbed("fT~:tw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.format = "";
      jsonLdOptions0.setExplicit((Boolean) null);
      jsonLdOptions0.setOmitGraph((Boolean) null);
      jsonLdOptions0.setPruneBlankNodeIdentifiers((Boolean) null);
      jsonLdOptions0.getExpandContext();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setExplicit(boolean0);
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.getProduceGeneralizedRdf();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean1 = jsonLdOptions1.getFrameExpansion();
      jsonLdOptions0.setCompactArrays(boolean1);
      jsonLdOptions1.getProcessingMode();
      jsonLdOptions0.getExpandContext();
      Boolean boolean2 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean2);
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setEmbed(boolean2);
      jsonLdOptions1.setProcessingMode("json-ld-1.0");
      jsonLdOptions1.getRequireAll();
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setBase("json-ld-1.1");
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.setRequireAll(boolean0);
      jsonLdOptions1.setBase("json-ld-1.0");
      jsonLdOptions0.copy();
      jsonLdOptions1.copy();
      jsonLdOptions1.getExplicit();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.setBase("9MAX`/*X pp_6Qr^)");
      jsonLdOptions0.setFrameExpansion((Boolean) null);
      Boolean boolean1 = jsonLdOptions0.getRequireAll();
      jsonLdOptions0.setAllowContainerSetOnType(boolean1);
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      jsonLdOptions0.setUseRdfType((Boolean) null);
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.setUseRdfType((Boolean) null);
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setOmitDefault((Boolean) null);
      Boolean boolean2 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setPruneBlankNodeIdentifiers((Boolean) null);
      Boolean boolean3 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean3);
      jsonLdOptions0.setBase("");
      jsonLdOptions0.setExpandContext((Object) null);
      jsonLdOptions0.setOmitDefault((Boolean) null);
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.setEmbed(boolean3);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.getAllowContainerSetOnType();
      Boolean boolean4 = jsonLdOptions1.useRdfType;
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.setRequireAll((Boolean) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setCompactArrays(boolean0);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.ALWAYS;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.getExplicit();
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setUseRdfType((Boolean) null);
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean1 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.setOmitDefault(boolean1);
      jsonLdOptions1.getPruneBlankNodeIdentifiers();
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      jsonLdOptions1.getUseRdfType();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getExplicit();
      jsonLdOptions1.getProcessingMode();
      // Undeclared exception!
      try { 
        jsonLdOptions1.setProcessingMode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.format = null;
      jsonLdOptions1.useNativeTypes = jsonLdOptions0.useNamespaces;
      Boolean boolean0 = jsonLdOptions1.getCompactArrays();
      jsonLdOptions0.setUseNativeTypes(boolean0);
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      jsonLdOptions2.setUseRdfType((Boolean) true);
      jsonLdOptions2.outputForm = "";
      jsonLdOptions2.getProcessingMode();
      jsonLdOptions0.setFrameExpansion(jsonLdOptions2.useNamespaces);
      JsonLdOptions jsonLdOptions3 = jsonLdOptions2.copy();
      jsonLdOptions2.getBase();
      jsonLdOptions1.setRequireAll((Boolean) true);
      DocumentLoader documentLoader0 = jsonLdOptions3.getDocumentLoader();
      jsonLdOptions2.setDocumentLoader(documentLoader0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      Boolean boolean0 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setUseRdfType(boolean0);
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setUseRdfType((Boolean) null);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.ALWAYS;
      jsonLdOptions0.setExplicit((Boolean) null);
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      Boolean boolean1 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setUseRdfType(boolean1);
      Boolean boolean2 = jsonLdOptions0.getRequireAll();
      jsonLdOptions0.setProduceGeneralizedRdf(boolean2);
      jsonLdOptions0.setProduceGeneralizedRdf(boolean0);
      Boolean boolean3 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setExplicit(boolean3);
      jsonLdOptions0.getRequireAll();
      jsonLdOptions0.getExplicit();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getExpandContext();
      jsonLdOptions0.setExpandContext((Object) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.getProduceGeneralizedRdf();
      jsonLdOptions0.getExplicit();
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      jsonLdOptions0.setCompactArrays((Boolean) null);
      Boolean boolean0 = jsonLdOptions1.getUseRdfType();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = new JsonLdOptions((String) null);
      Boolean boolean0 = jsonLdOptions1.useRdfType;
      jsonLdOptions0.useNamespaces = null;
      jsonLdOptions0.setOmitDefault(boolean0);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions0.getEmbedVal();
      Boolean boolean1 = jsonLdOptions0.useRdfType;
      jsonLdOptions1.setProduceGeneralizedRdf(boolean1);
      jsonLdOptions0.setOmitDefault(jsonLdOptions1.useNamespaces);
      jsonLdOptions1.setBase("Remote context loading has been disallowed (url was ");
      jsonLdOptions1.getDocumentLoader();
      Boolean boolean2 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setFrameExpansion(boolean2);
      Boolean boolean3 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setOmitGraph(boolean3);
      jsonLdOptions0.setOmitDefault(boolean0);
      Boolean boolean4 = jsonLdOptions0.getRequireAll();
      jsonLdOptions1.setUseRdfType(boolean4);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.setCompactArrays(boolean4);
      jsonLdOptions1.getCompactArrays();
      jsonLdOptions1.getProcessingMode();
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions0.getExplicit();
      jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions1.getExplicit();
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions1.getUseRdfType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("NF$&!(%|V=PS5fNp");
      jsonLdOptions0.setProcessingMode("\"YkG_U52JVmi");
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setCompactArrays(jsonLdOptions0.useNamespaces);
      Boolean boolean0 = jsonLdOptions0.useNamespaces;
      jsonLdOptions1.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.setBase((String) null);
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setUseNativeTypes((Boolean) true);
      Boolean boolean1 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setFrameExpansion(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setUseRdfType(jsonLdOptions0.useNamespaces);
      jsonLdOptions0.getExplicit();
      jsonLdOptions1.setExplicit((Boolean) null);
      jsonLdOptions0.getProduceGeneralizedRdf();
      jsonLdOptions0.setExpandContext((Object) null);
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setExplicit((Boolean) true);
      jsonLdOptions1.setUseRdfType((Boolean) null);
      jsonLdOptions1.getDocumentLoader();
      jsonLdOptions1.getProduceGeneralizedRdf();
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions1.getExplicit();
      jsonLdOptions0.setRequireAll((Boolean) null);
      jsonLdOptions0.setCompactArrays(jsonLdOptions1.useNamespaces);
      jsonLdOptions1.setProduceGeneralizedRdf((Boolean) true);
      jsonLdOptions1.getEmbed();
      try { 
        jsonLdOptions0.setEmbed("http://www.w3.org/2001/XMLSchema#boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions1.setOmitGraph(boolean0);
      Boolean boolean1 = jsonLdOptions1.getOmitGraph();
      jsonLdOptions0.setFrameExpansion(boolean1);
      jsonLdOptions0.getRequireAll();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions0.getEmbedVal();
      jsonLdOptions1.getBase();
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.getAllowContainerSetOnType();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("xAP$[bAG0~`:T");
      jsonLdOptions0.getAllowContainerSetOnType();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions1.setFrameExpansion((Boolean) true);
      jsonLdOptions0.setProduceGeneralizedRdf(boolean0);
      jsonLdOptions0.setCompactArrays(boolean0);
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setExpandContext((Object) null);
      jsonLdOptions1.setRequireAll(jsonLdOptions0.useNamespaces);
      JsonLdOptions jsonLdOptions2 = new JsonLdOptions();
      Boolean boolean1 = jsonLdOptions2.getAllowContainerSetOnType();
      jsonLdOptions0.setProduceGeneralizedRdf(boolean1);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions1.setEmbed("@never");
      JsonLdOptions jsonLdOptions3 = jsonLdOptions2.copy();
      Boolean boolean2 = jsonLdOptions2.useRdfType;
      jsonLdOptions2.setProduceGeneralizedRdf(boolean2);
      Boolean boolean3 = jsonLdOptions0.getRequireAll();
      jsonLdOptions1.setRequireAll(boolean3);
      jsonLdOptions3.setProcessingMode("U&>UihJ1 \"LL29ea");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.format = "_:";
      jsonLdOptions0.setExpandContext("_:");
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setFrameExpansion(jsonLdOptions0.useNamespaces);
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setUseNativeTypes((Boolean) true);
      jsonLdOptions0.setCompactArrays(boolean0);
      JsonLdOptions jsonLdOptions2 = jsonLdOptions1.copy();
      jsonLdOptions2.setExpandContext("");
      jsonLdOptions1.getOmitGraph();
      jsonLdOptions0.getRequireAll();
      jsonLdOptions0.getExpandContext();
      jsonLdOptions1.getEmbedVal();
      jsonLdOptions0.getExpandContext();
      Boolean boolean1 = jsonLdOptions1.getFrameExpansion();
      jsonLdOptions0.setOmitDefault(boolean1);
      JsonLdOptions jsonLdOptions3 = jsonLdOptions2.copy();
      jsonLdOptions3.getExplicit();
      jsonLdOptions1.setOmitGraph((Boolean) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.outputForm = "";
      jsonLdOptions0.format = "";
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      jsonLdOptions0.setBase((String) null);
      jsonLdOptions0.getOmitGraph();
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setOmitDefault(boolean0);
      Boolean boolean1 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.format = "";
      Boolean boolean2 = jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setOmitDefault(boolean2);
      Boolean boolean3 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getBase();
      jsonLdOptions0.setExplicit(boolean3);
      jsonLdOptions0.setUseNativeTypes(boolean1);
      jsonLdOptions0.getAllowContainerSetOnType();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("{572>,+,Cwo");
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.useNamespaces = boolean0;
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean1 = jsonLdOptions1.getUseNativeTypes();
      jsonLdOptions0.setEmbed(boolean1);
      jsonLdOptions0.outputForm = null;
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions1.getCompactArrays();
      jsonLdOptions1.getExplicit();
      jsonLdOptions0.setOmitGraph((Boolean) null);
      jsonLdOptions1.setFrameExpansion((Boolean) true);
      jsonLdOptions0.setProcessingMode("{572>,+,Cwo");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("@never");
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setOmitGraph(boolean0);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setAllowContainerSetOnType(boolean0);
      Boolean boolean1 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions1.setEmbed(boolean1);
      jsonLdOptions1.setOmitDefault((Boolean) true);
      Boolean boolean2 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      jsonLdOptions1.setUseRdfType(boolean2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.setProcessingMode("");
      jsonLdOptions0.getEmbedVal();
      Boolean boolean0 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.useNativeTypes = boolean0;
      Boolean boolean1 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setRequireAll(boolean1);
      Boolean boolean2 = jsonLdOptions0.useNativeTypes;
      Boolean boolean3 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions0.setUseRdfType(boolean3);
      jsonLdOptions0.setRequireAll(boolean2);
      Boolean boolean4 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setFrameExpansion(boolean4);
      jsonLdOptions0.setBase("conflicting indexes");
      Boolean boolean5 = null;
      // Undeclared exception!
      try { 
        jsonLdOptions0.setProduceGeneralizedRdf((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions1.setUseRdfType((Boolean) true);
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions1.setExplicit(boolean0);
      jsonLdOptions0.getEmbedVal();
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      jsonLdOptions0.setOmitGraph(boolean0);
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      jsonLdOptions0.getExpandContext();
      jsonLdOptions1.getProcessingMode();
      jsonLdOptions1.setUseNativeTypes((Boolean) true);
      Boolean boolean1 = jsonLdOptions1.getRequireAll();
      jsonLdOptions2.setOmitGraph(boolean1);
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions2.setOmitGraph((Boolean) true);
      jsonLdOptions0.getExplicit();
      jsonLdOptions1.getUseRdfType();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions(".6nua*X&sK&50U");
      jsonLdOptions0.getDocumentLoader();
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.setProcessingMode("");
      // Undeclared exception!
      try { 
        jsonLdOptions0.setProcessingMode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.getExplicit();
      Boolean boolean0 = jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setFrameExpansion(boolean0);
      jsonLdOptions0.setCompactArrays((Boolean) null);
      jsonLdOptions0.getOmitDefault();
      jsonLdOptions0.setPruneBlankNodeIdentifiers((Boolean) null);
      jsonLdOptions0.setBase("");
      jsonLdOptions0.setExpandContext("");
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.setCompactArrays((Boolean) null);
      jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setRequireAll(boolean0);
      jsonLdOptions0.getPruneBlankNodeIdentifiers();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.ALWAYS;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setExpandContext((Object) null);
      jsonLdOptions0.getEmbed();
      try { 
        jsonLdOptions0.setEmbed("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.format = "cd+}Mn<;H_9X[M?lT";
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions1.useNativeTypes;
      jsonLdOptions0.setExplicit(boolean0);
      jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.getExplicit();
      jsonLdOptions1.getExpandContext();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions(">&}O=");
      jsonLdOptions0.setBase(">&}O=");
      Boolean boolean0 = jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.setUseNativeTypes(boolean0);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.format = null;
      jsonLdOptions1.format = "";
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.setFrameExpansion((Boolean) true);
      jsonLdOptions0.setUseRdfType(jsonLdOptions1.useNamespaces);
      jsonLdOptions0.format = "";
      jsonLdOptions1.getExplicit();
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setRequireAll((Boolean) null);
      jsonLdOptions0.getProduceGeneralizedRdf();
      Boolean boolean1 = jsonLdOptions1.getFrameExpansion();
      jsonLdOptions1.setExplicit(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("x");
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions1.getBase();
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setFrameExpansion(boolean0);
      jsonLdOptions1.getOmitGraph();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("F7xJM?;R");
      Boolean boolean0 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      Boolean boolean1 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setExplicit(boolean1);
      jsonLdOptions0.setRequireAll(boolean0);
      jsonLdOptions0.getOmitDefault();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setEmbed((Boolean) true);
      jsonLdOptions1.outputForm = null;
      jsonLdOptions1.setBase((String) null);
      // Undeclared exception!
      try { 
        jsonLdOptions1.setProduceGeneralizedRdf((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.setExplicit(boolean0);
      jsonLdOptions0.getProduceGeneralizedRdf();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.setProduceGeneralizedRdf((Boolean) true);
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      Boolean boolean1 = jsonLdOptions0.getUseRdfType();
      jsonLdOptions1.getExplicit();
      jsonLdOptions0.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions0.setOmitGraph(boolean1);
      jsonLdOptions0.setDocumentLoader((DocumentLoader) null);
      jsonLdOptions0.setOmitDefault(boolean1);
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.getProduceGeneralizedRdf();
      jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions1.getOmitDefault();
      jsonLdOptions1.setUseRdfType(boolean0);
      Boolean boolean2 = jsonLdOptions1.getFrameExpansion();
      jsonLdOptions1.setRequireAll(boolean2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getBase();
      Boolean boolean0 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions1.setFrameExpansion(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.format = "";
      Boolean boolean0 = jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.setOmitDefault(boolean0);
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getExplicit();
      jsonLdOptions0.getOmitDefault();
      Boolean boolean1 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setUseNativeTypes(boolean1);
      Boolean boolean2 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setExplicit(boolean2);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setExplicit(boolean0);
      jsonLdOptions0.getUseRdfType();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      jsonLdOptions0.setExplicit(boolean0);
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getUseNativeTypes();
      jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      Boolean boolean1 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setOmitDefault(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setUseNativeTypes(boolean0);
      jsonLdOptions0.outputForm = "/";
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setFrameExpansion(boolean0);
      jsonLdOptions0.setProcessingMode("mYX");
      Boolean boolean1 = jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setUseRdfType(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.useRdfType;
      jsonLdOptions0.setOmitDefault(boolean0);
      jsonLdOptions0.setCompactArrays(boolean0);
      jsonLdOptions0.getEmbed();
      jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setProcessingMode("@last");
      Boolean boolean1 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setRequireAll(boolean1);
      jsonLdOptions0.getProcessingMode();
      jsonLdOptions0.setExpandContext("@last");
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.setOmitGraph(boolean0);
      jsonLdOptions0.getEmbed();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.getExpandContext();
      Boolean boolean0 = jsonLdOptions0.getAllowContainerSetOnType();
      jsonLdOptions0.setEmbed(boolean0);
      jsonLdOptions0.setExpandContext((Object) null);
      jsonLdOptions0.getDocumentLoader();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions0.setCompactArrays((Boolean) true);
      jsonLdOptions1.setRequireAll((Boolean) true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      jsonLdOptions0.getProcessingMode();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.format = "json-ld-1.0";
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean0);
      jsonLdOptions0.getProduceGeneralizedRdf();
      Boolean boolean1 = jsonLdOptions0.getOmitGraph();
      jsonLdOptions0.setProduceGeneralizedRdf(boolean1);
      Boolean boolean2 = jsonLdOptions0.useNativeTypes;
      jsonLdOptions0.setExplicit(boolean2);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setOmitGraph((Boolean) true);
      jsonLdOptions0.setAllowContainerSetOnType(boolean2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      Boolean boolean0 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.setOmitGraph(boolean0);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.setProcessingMode("");
      jsonLdOptions1.setAllowContainerSetOnType((Boolean) null);
      jsonLdOptions1.setUseNativeTypes((Boolean) true);
      jsonLdOptions1.getRequireAll();
      try { 
        jsonLdOptions0.setEmbed("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      jsonLdOptions0.getEmbed();
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      Boolean boolean0 = jsonLdOptions1.getAllowContainerSetOnType();
      jsonLdOptions1.setExplicit(boolean0);
      jsonLdOptions1.setProduceGeneralizedRdf(boolean0);
      jsonLdOptions1.setPruneBlankNodeIdentifiers((Boolean) true);
      Boolean boolean1 = jsonLdOptions1.useNamespaces;
      jsonLdOptions0.setPruneBlankNodeIdentifiers(boolean1);
      jsonLdOptions0.setProduceGeneralizedRdf(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("com.github.jsonldjava.core.JsonLdError$Error");
      jsonLdOptions0.getProcessingMode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("KT/! VPFf5J<");
      jsonLdOptions0.getProduceGeneralizedRdf();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      jsonLdOptions0.useNamespaces = boolean0;
      jsonLdOptions0.setBase("]{fO");
      jsonLdOptions0.getUseRdfType();
      jsonLdOptions0.getExpandContext();
      jsonLdOptions0.setProcessingMode("]{fO");
      jsonLdOptions0.getRequireAll();
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      jsonLdOptions0.setDocumentLoader(documentLoader0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      assertNotNull(jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object0 = jsonLdOptions1.getExpandContext();
      assertNull(object0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      assertNotNull(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(boolean1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setProduceGeneralizedRdf(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions2 = new JsonLdOptions();
      assertNotNull(jsonLdOptions2);
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions0));
      assertNull(jsonLdOptions2.getExplicit());
      assertFalse(jsonLdOptions2.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions2.getFrameExpansion());
      assertFalse(jsonLdOptions2.getUseRdfType());
      assertTrue(jsonLdOptions2.getCompactArrays());
      assertEquals("", jsonLdOptions2.getBase());
      assertFalse(jsonLdOptions2.getUseNativeTypes());
      assertFalse(jsonLdOptions2.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions2.getOmitGraph());
      assertNull(jsonLdOptions2.getOmitDefault());
      assertFalse(jsonLdOptions2.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions2.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions2.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions2.getUseNativeTypes();
      assertNotNull(boolean2);
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions0));
      assertFalse(boolean2);
      assertNotSame(jsonLdOptions2, jsonLdOptions1);
      assertNotSame(jsonLdOptions2, jsonLdOptions0);
      assertNull(jsonLdOptions2.getExplicit());
      assertFalse(jsonLdOptions2.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions2.getFrameExpansion());
      assertFalse(jsonLdOptions2.getUseRdfType());
      assertTrue(jsonLdOptions2.getCompactArrays());
      assertEquals("", jsonLdOptions2.getBase());
      assertFalse(jsonLdOptions2.getUseNativeTypes());
      assertFalse(jsonLdOptions2.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions2.getOmitGraph());
      assertNull(jsonLdOptions2.getOmitDefault());
      assertFalse(jsonLdOptions2.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions2.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions2.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setUseRdfType(boolean2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions2);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNotSame(jsonLdOptions1, jsonLdOptions2);
      assertNotSame(jsonLdOptions2, jsonLdOptions1);
      assertNotSame(jsonLdOptions2, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertNull(jsonLdOptions2.getExplicit());
      assertFalse(jsonLdOptions2.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions2.getFrameExpansion());
      assertFalse(jsonLdOptions2.getUseRdfType());
      assertTrue(jsonLdOptions2.getCompactArrays());
      assertEquals("", jsonLdOptions2.getBase());
      assertFalse(jsonLdOptions2.getUseNativeTypes());
      assertFalse(jsonLdOptions2.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions2.getOmitGraph());
      assertNull(jsonLdOptions2.getOmitDefault());
      assertFalse(jsonLdOptions2.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions2.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions2.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertTrue(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.getPruneBlankNodeIdentifiers();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setCompactArrays(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions1.getEmbed();
      assertNotNull(string0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals("@last", string0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      // Undeclared exception!
      try { 
        jsonLdOptions0.setProduceGeneralizedRdf((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("json-ld-1.1");
      assertNotNull(jsonLdOptions0);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.1", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.1", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setProcessingMode("json-ld-1.1");
      assertTrue(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.1", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.1", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions0.getEmbed();
      assertNotNull(string0);
      assertEquals("@never", string0);
      assertTrue(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.1", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.1", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      assertNotNull(boolean0);
      assertTrue(boolean0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setAllowContainerSetOnType(boolean0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object0 = jsonLdOptions0.getExpandContext();
      assertNull(object0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseRdfType(boolean0);
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitGraph((Boolean) null);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("$");
      assertNotNull(jsonLdOptions0);
      assertEquals("$", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals("$", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion(boolean0);
      assertEquals("$", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("$", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertEquals("$", jsonLdOptions1.getBase());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      // Undeclared exception!
      try { 
        jsonLdOptions1.setEmbed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setBase("Z");
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setCompactArrays((Boolean) null);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getRequireAll();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitGraph(boolean1);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setExpandContext("Z");
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("Z", jsonLdOptions0.getBase());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      // Undeclared exception!
      try { 
        jsonLdOptions0.setEmbed((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("@uf<vQ&gxA$YCV12Q'");
      assertNotNull(jsonLdOptions0);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getAllowContainerSetOnType();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.useRdfType = boolean0;
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      
      Object object0 = jsonLdOptions0.getExpandContext();
      assertNull(object0);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getRequireAll();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitDefault(boolean1);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setAllowContainerSetOnType(boolean0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setAllowContainerSetOnType(boolean0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions0.getFrameExpansion();
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setCompactArrays(boolean2);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      assertNotNull(documentLoader0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions0.getFrameExpansion();
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitGraph(boolean3);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("@uf<vQ&gxA$YCV12Q'", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      try { 
        jsonLdOptions0.setEmbed("_4[lX+/Qc>7.^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("NOT_IMPLEMENTED");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("NOT_IMPLEMENTED", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("NOT_IMPLEMENTED", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseRdfType(boolean0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("NOT_IMPLEMENTED", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("NOT_IMPLEMENTED", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions1.getCompactArrays();
      assertNotNull(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseNativeTypes(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.getOmitGraph();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.useNamespaces;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      jsonLdOptions1.setEmbed(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions1.getUseRdfType();
      assertNotNull(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("unknown format");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LAST;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getCompactArrays();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertTrue(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader0 = jsonLdOptions1.getDocumentLoader();
      assertNotNull(documentLoader0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertEquals("unknown format", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("_\"Ow$yj$TM$-");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("_\"Ow$yj$TM$-", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("_\"Ow$yj$TM$-", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("_\"Ow$yj$TM$-", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.getFrameExpansion();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("_\"Ow$yj$TM$-", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("_\"Ow$yj$TM$-", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object0 = jsonLdOptions1.getExpandContext();
      assertNull(object0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setExpandContext((Object) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.outputForm = "";
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      
      jsonLdOptions1.setAllowContainerSetOnType((Boolean) true);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getFrameExpansion();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setOmitGraph(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setProcessingMode("http://www.w3.org/2001/XMLSchema#anyURI");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader0 = jsonLdOptions1.getDocumentLoader();
      assertNotNull(documentLoader0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.useNativeTypes = (Boolean) true;
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      
      jsonLdOptions1.setProcessingMode("org.apache.http.impl.client.CloseableHttpClient");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertEquals("org.apache.http.impl.client.CloseableHttpClient", jsonLdOptions1.getProcessingMode());
      assertTrue(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader1 = jsonLdOptions0.getDocumentLoader();
      assertNotNull(documentLoader1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertSame(documentLoader1, documentLoader0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions0.getEmbed();
      assertNotNull(string0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals("@last", string0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions0.getEmbedVal();
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals(JsonLdConsts.Embed.LAST, jsonLdConsts_Embed0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed1 = jsonLdOptions0.getEmbedVal();
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals(JsonLdConsts.Embed.LAST, jsonLdConsts_Embed1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertSame(jsonLdConsts_Embed1, jsonLdConsts_Embed0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setProcessingMode("e\"KG_");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("e\"KG_", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string1 = jsonLdOptions1.getEmbed();
      assertNotNull(string1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals("@last", string1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("e\"KG_", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setEmbed("@never");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("http://www.w3.org/2001/XMLSchema#anyURI", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertNull(jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertTrue(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("e\"KG_", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("xAP$[bAG0~`:T");
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getAllowContainerSetOnType();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion((Boolean) true);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setProduceGeneralizedRdf(boolean1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setCompactArrays(boolean1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setRequireAll(jsonLdOptions0.useNamespaces);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setProduceGeneralizedRdf(jsonLdOptions0.useNamespaces);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions0.getUseNativeTypes();
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed("@never");
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions1.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions0.useRdfType;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      jsonLdOptions0.setProduceGeneralizedRdf(boolean3);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean4 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean4);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(boolean4);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setRequireAll(boolean4);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setProcessingMode("U&>UihJ1 \"LL29ea");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions1.getFrameExpansion());
      assertEquals("U&>UihJ1 \"LL29ea", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions0.getProcessingMode();
      assertNotNull(string0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals("json-ld-1.0", string0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getCompactArrays());
      assertEquals("xAP$[bAG0~`:T", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.useNamespaces = jsonLdOptions1.useNamespaces;
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      
      jsonLdOptions1.setEmbed("@link");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions1.getUseRdfType();
      assertNotNull(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setUseRdfType(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      assertNotNull(documentLoader0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions2 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions2.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions0, jsonLdOptions2);
      assertNotSame(jsonLdOptions2, jsonLdOptions0);
      assertNotSame(jsonLdOptions2, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions2.getExplicit());
      assertNull(jsonLdOptions2.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions2.getProcessingMode());
      assertFalse(jsonLdOptions2.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions2.getRequireAll());
      assertFalse(jsonLdOptions2.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions2.getOmitGraph());
      assertFalse(jsonLdOptions2.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions2.getUseRdfType());
      assertFalse(jsonLdOptions2.getFrameExpansion());
      assertTrue(jsonLdOptions2.getCompactArrays());
      assertEquals("", jsonLdOptions2.getBase());
      assertFalse(jsonLdOptions2.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions3 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions3);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions2));
      assertNotSame(jsonLdOptions0, jsonLdOptions3);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions0, jsonLdOptions2);
      assertNotSame(jsonLdOptions3, jsonLdOptions0);
      assertNotSame(jsonLdOptions3, jsonLdOptions1);
      assertNotSame(jsonLdOptions3, jsonLdOptions2);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions3.getFrameExpansion());
      assertEquals("", jsonLdOptions3.getBase());
      assertTrue(jsonLdOptions3.getCompactArrays());
      assertFalse(jsonLdOptions3.getUseRdfType());
      assertEquals("json-ld-1.0", jsonLdOptions3.getProcessingMode());
      assertFalse(jsonLdOptions3.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions3.getUseNativeTypes());
      assertNull(jsonLdOptions3.getExplicit());
      assertFalse(jsonLdOptions3.getOmitGraph());
      assertFalse(jsonLdOptions3.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions3.getRequireAll());
      assertFalse(jsonLdOptions3.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions3.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions3.setExpandContext(boolean0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions3));
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions3));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions3.equals((Object)jsonLdOptions2));
      assertNotSame(jsonLdOptions0, jsonLdOptions3);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions0, jsonLdOptions2);
      assertNotSame(jsonLdOptions1, jsonLdOptions2);
      assertNotSame(jsonLdOptions1, jsonLdOptions3);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNotSame(jsonLdOptions3, jsonLdOptions0);
      assertNotSame(jsonLdOptions3, jsonLdOptions1);
      assertNotSame(jsonLdOptions3, jsonLdOptions2);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("", jsonLdOptions1.getBase());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions3.getFrameExpansion());
      assertEquals("", jsonLdOptions3.getBase());
      assertTrue(jsonLdOptions3.getCompactArrays());
      assertFalse(jsonLdOptions3.getUseRdfType());
      assertEquals("json-ld-1.0", jsonLdOptions3.getProcessingMode());
      assertFalse(jsonLdOptions3.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions3.getUseNativeTypes());
      assertNull(jsonLdOptions3.getExplicit());
      assertFalse(jsonLdOptions3.getOmitGraph());
      assertFalse(jsonLdOptions3.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions3.getRequireAll());
      assertFalse(jsonLdOptions3.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions3.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed1 = JsonLdConsts.Embed.LINK;
      JsonLdOptions jsonLdOptions4 = new JsonLdOptions((String) null);
      assertNotNull(jsonLdOptions4);
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions3));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions0));
      assertFalse(jsonLdOptions4.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions4.getProcessingMode());
      assertNull(jsonLdOptions4.getOmitDefault());
      assertFalse(jsonLdOptions4.getFrameExpansion());
      assertFalse(jsonLdOptions4.getRequireAll());
      assertFalse(jsonLdOptions4.getOmitGraph());
      assertFalse(jsonLdOptions4.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions4.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions4.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions4.getBase());
      assertTrue(jsonLdOptions4.getCompactArrays());
      assertNull(jsonLdOptions4.getExplicit());
      assertFalse(jsonLdOptions4.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions4.getExplicit();
      assertNull(boolean1);
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions3));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions2));
      assertFalse(jsonLdOptions4.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions4, jsonLdOptions1);
      assertNotSame(jsonLdOptions4, jsonLdOptions3);
      assertNotSame(jsonLdOptions4, jsonLdOptions2);
      assertNotSame(jsonLdOptions4, jsonLdOptions0);
      assertFalse(jsonLdOptions4.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions4.getProcessingMode());
      assertNull(jsonLdOptions4.getOmitDefault());
      assertFalse(jsonLdOptions4.getFrameExpansion());
      assertFalse(jsonLdOptions4.getRequireAll());
      assertFalse(jsonLdOptions4.getOmitGraph());
      assertFalse(jsonLdOptions4.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions4.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions4.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions4.getBase());
      assertTrue(jsonLdOptions4.getCompactArrays());
      assertNull(jsonLdOptions4.getExplicit());
      assertFalse(jsonLdOptions4.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      // Undeclared exception!
      try { 
        jsonLdOptions0.setProduceGeneralizedRdf((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getRequireAll();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.useRdfType = boolean0;
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      
      jsonLdOptions0.setBase("Vp2Z,");
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions1.getEmbedVal();
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals(JsonLdConsts.Embed.LAST, jsonLdConsts_Embed0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions1.useNativeTypes;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      jsonLdOptions1.setFrameExpansion(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions1.getAllowContainerSetOnType();
      assertNotNull(boolean2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean2);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.format = null;
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      
      jsonLdOptions0.setOmitDefault(boolean2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions1.getExplicit();
      assertNull(boolean3);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean4 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean4);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(boolean4);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions1.getEmbed();
      assertNotNull(string0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals("@last", string0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string1 = jsonLdOptions0.getEmbed();
      assertNotNull(string1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals("@last", string1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object0 = jsonLdOptions0.getExpandContext();
      assertNull(object0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean5 = jsonLdOptions1.getOmitDefault();
      assertNull(boolean5);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean6 = jsonLdOptions0.useNativeTypes;
      assertNull(boolean6);
      
      jsonLdOptions0.setExplicit((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object1 = jsonLdOptions0.getExpandContext();
      assertNull(object1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setDocumentLoader((DocumentLoader) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setEmbed("@always");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean7 = jsonLdOptions0.getExplicit();
      assertNull(boolean7);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setCompactArrays((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertNull(jsonLdOptions1.getCompactArrays());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion((Boolean) true);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string2 = jsonLdOptions0.getBase();
      assertNotNull(string2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Vp2Z,", string2);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      try { 
        jsonLdOptions0.setEmbed("rE$pT2h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getOmitDefault();
      assertNull(boolean0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion((Boolean) null);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed("@link");
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions1.getFrameExpansion());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getRequireAll();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.useRdfType = boolean0;
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      
      jsonLdOptions0.setBase("Vp2Z,");
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      assertNotNull(jsonLdOptions1);
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = jsonLdOptions1.getEmbedVal();
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals(JsonLdConsts.Embed.LAST, jsonLdConsts_Embed0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions1.useNativeTypes;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      jsonLdOptions1.setFrameExpansion(boolean1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions1.getAllowContainerSetOnType();
      assertNotNull(boolean2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertFalse(boolean2);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.format = null;
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      
      jsonLdOptions0.setOmitDefault(boolean2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions1.getExplicit();
      assertNull(boolean3);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean4 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean4);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(boolean4);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions1.getEmbed();
      assertNotNull(string0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertEquals("@last", string0);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string1 = jsonLdOptions0.getEmbed();
      assertNotNull(string1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertEquals("@last", string1);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object0 = jsonLdOptions1.getExpandContext();
      assertNull(object0);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean5 = jsonLdOptions1.getOmitDefault();
      assertNull(boolean5);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean6 = jsonLdOptions0.useNativeTypes;
      assertNull(boolean6);
      
      jsonLdOptions0.setExplicit((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Object object1 = jsonLdOptions0.getExpandContext();
      assertNull(object1);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setDocumentLoader((DocumentLoader) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setEmbed("@always");
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean7 = jsonLdOptions0.getExplicit();
      assertNull(boolean7);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions1.setCompactArrays((Boolean) null);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(jsonLdOptions1.equals((Object)jsonLdOptions0));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNotSame(jsonLdOptions1, jsonLdOptions0);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions1.getOmitGraph());
      assertNull(jsonLdOptions1.getOmitDefault());
      assertEquals("Vp2Z,", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getRequireAll());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertFalse(jsonLdOptions1.getUseRdfType());
      assertNull(jsonLdOptions1.getExplicit());
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertNull(jsonLdOptions1.getCompactArrays());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion((Boolean) true);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string2 = jsonLdOptions0.getBase();
      assertNotNull(string2);
      assertFalse(jsonLdOptions0.equals((Object)jsonLdOptions1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Vp2Z,", string2);
      assertNotSame(jsonLdOptions0, jsonLdOptions1);
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("Vp2Z,", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      try { 
        jsonLdOptions0.setEmbed("rE$pT2h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getOmitGraph();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed(boolean0);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      boolean boolean1 = jsonLdOptions0.getProduceGeneralizedRdf();
      assertFalse(boolean1);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setBase("P' ![9ooOpn|;");
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("P' ![9ooOpn|;", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("P' ![9ooOpn|;", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertEquals("P' ![9ooOpn|;", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitDefault(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("P' ![9ooOpn|;", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean4 = jsonLdOptions0.getPruneBlankNodeIdentifiers();
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitDefault());
      assertEquals("P' ![9ooOpn|;", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setCompactArrays((Boolean) true);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader0 = jsonLdOptions0.getDocumentLoader();
      assertNotNull(documentLoader0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setDocumentLoader(documentLoader0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setUseNativeTypes((Boolean) null);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.useNamespaces;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      jsonLdOptions0.setPruneBlankNodeIdentifiers((Boolean) null);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setProcessingMode("com.github.jsonldjava.disallowRemoteContextLoading");
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getUseRdfType();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string0 = jsonLdOptions0.getProcessingMode();
      assertNotNull(string0);
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", string0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LINK;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean2 = jsonLdOptions0.getOmitDefault();
      assertNull(boolean2);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean3 = jsonLdOptions0.getUseNativeTypes();
      assertNull(boolean3);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitDefault((Boolean) null);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      String string1 = jsonLdOptions0.getEmbed();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@link", string1);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      JsonLdConsts.Embed jsonLdConsts_Embed1 = jsonLdOptions0.getEmbedVal();
      assertEquals(JsonLdConsts.Embed.LINK, jsonLdConsts_Embed1);
      assertSame(jsonLdConsts_Embed1, jsonLdConsts_Embed0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      DocumentLoader documentLoader1 = jsonLdOptions0.getDocumentLoader();
      assertNotNull(documentLoader1);
      assertSame(documentLoader1, documentLoader0);
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertNull(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertEquals("com.github.jsonldjava.disallowRemoteContextLoading", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed("@last");
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getAllowContainerSetOnType();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setOmitGraph(boolean0);
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getExplicit();
      assertNull(boolean1);
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setFrameExpansion((Boolean) true);
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertTrue(jsonLdOptions0.getFrameExpansion());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertNotNull(jsonLdOptions0);
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean0 = jsonLdOptions0.getRequireAll();
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      jsonLdOptions0.setEmbed("@last");
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      Boolean boolean1 = jsonLdOptions0.getAllowContainerSetOnType();
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      
      try { 
        jsonLdOptions0.setEmbed("json-ld-1.1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid @embed value
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("");
      Boolean boolean0 = jsonLdOptions0.getFrameExpansion();
      jsonLdOptions0.useRdfType = boolean0;
      jsonLdOptions0.useNamespaces = boolean0;
      jsonLdOptions0.setProcessingMode("");
      Boolean boolean1 = jsonLdOptions0.useNamespaces;
      jsonLdOptions0.setAllowContainerSetOnType(boolean1);
      jsonLdOptions0.setUseRdfType(jsonLdOptions0.useRdfType);
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions1.getExpandContext();
      jsonLdOptions1.setEmbed((Boolean) true);
      Boolean boolean2 = jsonLdOptions0.useNamespaces;
      jsonLdOptions0.getOmitDefault();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.LAST;
      jsonLdOptions1.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.setExpandContext(boolean2);
      Boolean boolean3 = jsonLdOptions1.useNativeTypes;
      jsonLdOptions1.setPruneBlankNodeIdentifiers(boolean3);
      jsonLdOptions0.setCompactArrays(jsonLdOptions0.useNamespaces);
      jsonLdOptions0.getEmbed();
      jsonLdOptions1.getBase();
      // Undeclared exception!
      try { 
        jsonLdOptions0.setEmbed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      Boolean boolean0 = jsonLdOptions0.useNamespaces;
      jsonLdOptions0.useRdfType = boolean0;
      jsonLdOptions0.getCompactArrays();
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.NEVER;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.setExplicit(boolean0);
      jsonLdOptions0.getOmitGraph();
      Boolean boolean1 = jsonLdOptions0.getExplicit();
      jsonLdOptions0.setRequireAll(boolean1);
      Boolean boolean2 = jsonLdOptions0.getOmitDefault();
      assertNull(boolean2);
      
      JsonLdOptions jsonLdOptions1 = jsonLdOptions0.copy();
      jsonLdOptions0.getEmbedVal();
      jsonLdOptions0.copy();
      String string0 = jsonLdOptions1.getEmbed();
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions1.getPruneBlankNodeIdentifiers());
      assertTrue(jsonLdOptions1.getCompactArrays());
      assertEquals("", jsonLdOptions1.getBase());
      assertFalse(jsonLdOptions1.getProduceGeneralizedRdf());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("json-ld-1.0", jsonLdOptions1.getProcessingMode());
      assertFalse(jsonLdOptions1.getUseNativeTypes());
      assertEquals("@never", string0);
      assertFalse(jsonLdOptions1.getFrameExpansion());
      assertFalse(jsonLdOptions1.getAllowContainerSetOnType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("json-ld-1.1");
      JsonLdConsts.Embed jsonLdConsts_Embed0 = JsonLdConsts.Embed.ALWAYS;
      jsonLdOptions0.setEmbed(jsonLdConsts_Embed0);
      jsonLdOptions0.getRequireAll();
      jsonLdOptions0.setProcessingMode("json-ld-1.1");
      jsonLdOptions0.getEmbed();
      assertEquals("json-ld-1.1", jsonLdOptions0.getProcessingMode());
  }
}
