/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 13:51:03 GMT 2020
 */

package com.github.jsonldjava.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.jsonldjava.core.Context;
import com.github.jsonldjava.core.JsonLdApi;
import com.github.jsonldjava.core.JsonLdOptions;
import com.github.jsonldjava.core.RDFDataset;
import com.github.jsonldjava.core.RDFDatasetUtils;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RDFDatasetUtils_ESTest extends RDFDatasetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RDFDatasetUtils.escape("", (StringBuilder) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("2zHz{A_5>o");
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi(object0, jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset();
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      Context context0 = new Context((Map<String, Object>) rDFDataset0, jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertFalse(context0.isEmpty());
      assertEquals(2, context0.size());
      assertNotNull(context0);
      
      Context context1 = context0.clone();
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(context1.equals((Object)context0));
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertFalse(context0.isEmpty());
      assertEquals(2, context0.size());
      assertFalse(context1.isEmpty());
      assertEquals(2, context1.size());
      assertNotNull(context1);
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      
      Map<String, Object> map0 = context1.getInverse();
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(context0.equals((Object)context1));
      assertTrue(context1.equals((Object)context0));
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertFalse(context0.isEmpty());
      assertEquals(2, context0.size());
      assertFalse(context1.isEmpty());
      assertEquals(2, context1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      
      rDFDataset0.graphToRDF("json-ld-1.0", map0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertTrue(context0.equals((Object)context1));
      assertTrue(context1.equals((Object)context0));
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset0.size());
      assertFalse(context0.isEmpty());
      assertEquals(2, context0.size());
      assertFalse(context1.isEmpty());
      assertEquals(2, context1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      
      String string0 = RDFDatasetUtils.unescape("json-ld-1.0");
      assertNotNull(string0);
      assertEquals("json-ld-1.0", string0);
      
      RDFDatasetUtils.toNQuads(rDFDataset0, (StringBuilder) null);
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", "", "", "");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "0Zq\"`&9tb%!");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("<> <> <> <0Zq\\\"`&9tb%!> .\n", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder(41);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(41);
      assertEquals(")", stringBuilder0.toString());
      assertEquals(")", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(351);
      assertEquals(")\u015F", stringBuilder0.toString());
      assertEquals(")\u015F", stringBuilder1.toString());
      assertEquals(")\u015F", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder1.append("");
      assertEquals(")\u015F", stringBuilder0.toString());
      assertEquals(")\u015F", stringBuilder1.toString());
      assertEquals(")\u015F", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((double) 41);
      assertEquals(")\u015F41.0", stringBuilder0.toString());
      assertEquals(")\u015F41.0", stringBuilder1.toString());
      assertEquals(")\u015F41.0", stringBuilder3.toString());
      assertEquals(")\u015F41.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      
      RDFDatasetUtils.escape("<> <> <> <0Zq\"`&9tb%!> .\n", stringBuilder3);
      assertEquals(")\u015F41.0<> <> <> <0Zq\\\"`&9tb%!> .\\n", stringBuilder0.toString());
      assertEquals(")\u015F41.0<> <> <> <0Zq\\\"`&9tb%!> .\\n", stringBuilder1.toString());
      assertEquals(")\u015F41.0<> <> <> <0Zq\\\"`&9tb%!> .\\n", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad("", "<r.8$KW,<LY#", "", "<r.8$KW,<LY#");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(4, rDFDataset_Quad1.size());
      assertNotNull(rDFDataset_Quad1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = rDFDataset_Quad1.put("com.google.common.collect.DiscreteDomain$IntegerDomain", object0);
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(5, rDFDataset_Quad1.size());
      assertNull(object1);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "<> <> <> <0Zq\"`&9tb%!> .\n");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(5, rDFDataset_Quad1.size());
      assertNotNull(string1);
      assertEquals("<> <<r.8$KW,<LY#> <> <<> <> <> <0Zq\\\"`&9tb%!> .\\n> .\n", string1);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string2 = RDFDatasetUtils.unescape("^^<");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^^<", string2);
      
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "_:z", "^^<");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(5, rDFDataset_Quad1.size());
      assertNotNull(string3);
      assertEquals("<> <<r.8$KW,<LY#> <> _:g .\n", string3);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RDFDatasetUtils.unescape("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("\r", "9=6]h!&vjL", "8V|~gmF'wmlW.{],");
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI("\r");
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_IRI0.size());
      assertNotNull(rDFDataset_IRI0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_IRI0, rDFDataset_IRI0, "=z9R");
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_IRI0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string1 = RDFDatasetUtils.unescape("zeX-z");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zeX-z", string1);
      
      RDFDataset.Literal rDFDataset_Literal1 = new RDFDataset.Literal("com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.BloomFilterStrategies", "N");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertNotNull(rDFDataset_Literal1);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad(rDFDataset_Literal1, rDFDataset_Literal1, rDFDataset_Literal1, "com.google.common.hash.BloomFilterStrategies");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(rDFDataset_Quad1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "#}l>.FjZ8oj1", "", stringBuilder0);
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <#}l>.FjZ8oj1> .\n", stringBuilder0.toString());
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string2 = RDFDatasetUtils.unescape("com.google.common.hash.Funnels$IntegerFunnel");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("com.google.common.hash.Funnels$IntegerFunnel", string2);
      
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "8V|~gmF'wmlW.{],", "d0+eN");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(string3);
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <8V|~gmF'wmlW.{],> .\n", string3);
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string4 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "\r");
      assertFalse(rDFDataset_Literal0.equals((Object)rDFDataset_Literal1));
      assertFalse(rDFDataset_Quad0.equals((Object)rDFDataset_Quad1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_IRI0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string4);
      assertEquals("\r <\\r> <\\r> <\\r> .\n", string4);
      assertNotSame(rDFDataset_Literal0, rDFDataset_Literal1);
      assertNotSame(rDFDataset_Quad0, rDFDataset_Quad1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RDFDatasetUtils.escape("", (StringBuilder) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("2zHz{A_5>o");
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi(object0, jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      rDFDataset0.addTriple("<", "json-ld-1.0", "");
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      
      String string0 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNull(jsonLdOptions0.getExplicit());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(string0);
      assertEquals("<<> <json-ld-1.0> <> .\n", string0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", "", "MURMUR128_MITZ_64", "");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      boolean boolean0 = rDFDataset_Quad0.replace(")?):", (Object) "", (Object) "");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(boolean0);
      
      Object object0 = rDFDataset_Quad0.put("MURMUR128_MITZ_64", "");
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object0);
      
      Object object1 = rDFDataset_Quad0.put("cOlnjPFNY6b", "");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(6, rDFDataset_Quad0.size());
      assertNull(object1);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "t;O");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(6, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n", string0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "cOlnjPFNY6b");
      assertFalse(string1.equals((Object)string0));
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(6, rDFDataset_Quad0.size());
      assertNotNull(string1);
      assertEquals("<> <> <MURMUR128_MITZ_64> <cOlnjPFNY6b> .\n", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder(16);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("<> <> <MURMUR128_MITZ_64> <t;O> .\n");
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n", stringBuilder0.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(16);
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16", stringBuilder0.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16", stringBuilder1.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(false);
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16false", stringBuilder0.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16false", stringBuilder1.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16false", stringBuilder2.toString());
      assertEquals("<> <> <MURMUR128_MITZ_64> <t;O> .\n16false", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      StringBuilder stringBuilder4 = stringBuilder3.insert(16, '~');
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false", stringBuilder0.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false", stringBuilder1.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false", stringBuilder2.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false", stringBuilder3.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      
      RDFDatasetUtils.escape("<> <> <MURMUR128_MITZ_64> <cOlnj\\PFNY6b> .\n", stringBuilder4);
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false<> <> <MURMUR128_MITZ_64> <cOlnj\\\\PFNY6b> .\\n", stringBuilder0.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false<> <> <MURMUR128_MITZ_64> <cOlnj\\\\PFNY6b> .\\n", stringBuilder1.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false<> <> <MURMUR128_MITZ_64> <cOlnj\\\\PFNY6b> .\\n", stringBuilder2.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false<> <> <MURMUR128_MITZ_64> <cOlnj\\\\PFNY6b> .\\n", stringBuilder3.toString());
      assertEquals("<> <> <MURMUR128~_MITZ_64> <t;O> .\n16false<> <> <MURMUR128_MITZ_64> <cOlnj\\\\PFNY6b> .\\n", stringBuilder4.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      
      String string2 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "_:z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(6, rDFDataset_Quad0.size());
      assertNotNull(string2);
      assertEquals("<> <> <MURMUR128_MITZ_64> _:z .\n", string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = RDFDatasetUtils.unescape("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("@index", "9=6]h!&vjL", "8V|~gmF'wmlW.{],");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI("\r");
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertEquals(2, rDFDataset_IRI0.size());
      assertNotNull(rDFDataset_IRI0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_IRI0, rDFDataset_IRI0, "=z9R");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertEquals(2, rDFDataset_IRI0.size());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "zeX-z", "@index");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertEquals(2, rDFDataset_IRI0.size());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string1);
      assertEquals("_:a <\\r> <\\r> <zeX-z> .\n", string1);
      
      RDFDataset.Literal rDFDataset_Literal1 = new RDFDataset.Literal("com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.BloomFilterStrategies", "N");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertNotNull(rDFDataset_Literal1);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad(rDFDataset_Literal1, rDFDataset_Literal1, rDFDataset_Literal1, "com.google.common.hash.BloomFilterStrategies");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(rDFDataset_Quad1);
      
      StringBuilder stringBuilder0 = new StringBuilder(34);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "#}l>.FjZ8oj1", "", stringBuilder0);
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <#}l>.FjZ8oj1> .\n", stringBuilder0.toString());
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string2 = RDFDatasetUtils.unescape("com.google.common.hash.Funnels$IntegerFunnel");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("com.google.common.hash.Funnels$IntegerFunnel", string2);
      
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "8V|~gmF'wmlW.{],", "d0+eN");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(string3);
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <8V|~gmF'wmlW.{],> .\n", string3);
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RDFDataset rDFDataset0 = new RDFDataset();
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      rDFDataset0.addTriple("oJABk~", "oJABk~", "(_:(?:[A-Za-z][A-Za-z0-9]*))", "UYdr-i", "(_:(?:[A-Za-z][A-Za-z0-9]*))");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      
      String string0 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(string0);
      assertEquals("<oJABk~> <oJABk~> \"(_:(?:[A-Za-z][A-Za-z0-9]*))\"^^<UYdr-i> .\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("CYCLIC_IRI_MAPPING");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, "\"");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("CYCLIC_IRI_MAPPING CYCLIC_IRI_MAPPING CYCLIC_IRI_MAPPING <> .\n", string0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, (String) null, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string1);
      assertEquals("_:z CYCLIC_IRI_MAPPING _:z .\n", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("CYCLgC_IRI_MAPPING");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, "\"");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("CYCLgC_IRI_MAPPING CYCLgC_IRI_MAPPING CYCLgC_IRI_MAPPING <> .\n", string0);
      
      RDFDataset rDFDataset0 = new RDFDataset();
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "{4}))|(?:U(", "{4}))|(?:U(");
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string1);
      assertEquals("_:z CYCLgC_IRI_MAPPING _:z <{4}))|(?:U(> .\n", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString", "-{.D1<[ZuPT", "-{.D1<[ZuPT", "jUNoSm&0v2");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)rDFDataset_Quad0.entrySet();
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      assertNotNull(set0);
      
      Object object0 = rDFDataset_Quad0.put("jUNoSm&0v2", "-{.D1<[ZuPT");
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, " $=$'N!(", "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> <-{.D1<[ZuPT> <-{.D1<[ZuPT> < $=$'N!(> .\n", string0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "|", "<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> <-{.D1<[ZuPT> <-{.D1<[ZuPT> < $=$'N!(> .\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string1);
      assertEquals("<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> <-{.D1<[ZuPT> <-{.D1<[ZuPT> <|> .\n", string1);
      
      RDFDataset rDFDataset0 = RDFDatasetUtils.parseNQuads("<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> <-{.D1<[ZuPT> <-{.D1<[ZuPT> <|> .\n");
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "_4rJkS_";
      String string1 = "m";
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("_4rJkS_", (String) null, "m");
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "m");
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string2 = "";
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string3);
      assertEquals("_4rJkS_ _4rJkS_ \"_4rJkS_\" <> .\n", string3);
      
      String string4 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "_4rJkS_ _4rJkS_ \"_4rJkS_\" <> .\n");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string4);
      assertEquals("_4rJkS_ _4rJkS_ \"_4rJkS_\" <_4rJkS_ _4rJkS_ \\\"_4rJkS_\\\" <> .\\n> .\n", string4);
      
      String string5 = RDFDatasetUtils.unescape("m");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("m", string5);
      
      RDFDataset rDFDataset0 = new RDFDataset();
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = rDFDataset0.put("LiQ<wg|Rk", object0);
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset0.size());
      assertNull(object1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "_4rJkS_ _4rJkS_ \"_4rJkS_\" <_4rJkS_ _4rJkS_ \"_4rJkS_\" <> .\n> .\n");
      assertEquals("_4rJkS_ _4rJkS_ \"_4rJkS_\" <_4rJkS_ _4rJkS_ \"_4rJkS_\" <> .\n> .\n", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0, stringBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.RDFDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("66vA1gb!c6}4O2'", (String) null, "QK~p~TKxtA~VR[");
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "The magic number cannot be null");
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "66vA1gb!c6}4O2'", "", stringBuilder0);
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertEquals("_:z 66vA1gb!c6}4O2' \"66vA1gb!c6}4O2'\" <66vA1gb!c6}4O2'> .\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = RDFDatasetUtils.unescape("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI("/i['[Eb}n");
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertNotNull(rDFDataset_IRI0);
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, integer0).when(biFunction0).apply(anyString() , any());
      rDFDataset_IRI0.replaceAll(biFunction0);
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      
      Collection<Object> collection0 = rDFDataset_IRI0.values();
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertTrue(collection0.contains((-494)));
      assertFalse(collection0.contains("/i['[Eb}n"));
      assertNotNull(collection0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_IRI0, rDFDataset_IRI0, rDFDataset_IRI0, "");
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "/i['[Eb}n");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("com.github.jsonldjava.core.RDFDataset$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset rDFDataset0 = RDFDatasetUtils.parseNQuads("");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal((String) null, "", "");
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "\\");
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      StringBuilder stringBuilder0 = new StringBuilder(2131);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.escape("UgppURt~Cz8\" yc,V", stringBuilder0);
      assertEquals("UgppURt~Cz8\\\" yc,V", stringBuilder0.toString());
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad("{O(Y:Ro", "", "", "", (String) null, "ds\")'}n=:T&^");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(rDFDataset_Quad1);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad1, (String) null, "", stringBuilder0);
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertEquals("UgppURt~Cz8\\\" yc,V<{\\u007fO(Y:Ro> <> \"\"^^<> .\n", stringBuilder0.toString());
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      try { 
        RDFDatasetUtils.parseNQuads("[ \t]+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000012
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(":e@S'", "iYH 2u+nN`45", "Auk", "iYH 2u+nN`45");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "ko93");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("<:e@S'> <iYH 2u+nN`45> <Auk> <ko93> .\n", string0);
      
      try { 
        RDFDatasetUtils.parseNQuads(" .\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000007
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "4p2G^\\KK|z]]Em";
      String string1 = RDFDatasetUtils.unescape("4p2G^KK|z]]Em");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4p2G^KK|z]]Em", string1);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", "4p2G^KK|z]]Em", "", "4p2G^KK|z]]Em");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string2 = "\r";
      String string3 = "=h,F0A z 6=";
      StringBuilder stringBuilder0 = new StringBuilder("=&m)mW&RhmaL/");
      assertEquals("=&m)mW&RhmaL/", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string4 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "\r", "eME_elzHIz&U6~");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string4);
      assertEquals("<> <4p2G^KK|z]]Em> <> <\\r> .\n", string4);
      
      int int0 = 56;
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "<> <4p2G^\\KK|z]]Em> <> <\r> .\n", 56, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 56, end 56, s.length() 29
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal((String) null, "WRX#", "PCdw-");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI((String) null);
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertNotNull(rDFDataset_IRI0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_IRI0, (String) null);
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(3, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "WRX#", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi();
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string0 = null;
      Object object0 = rDFDataset0.put((String) null, (Object) null);
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI("");
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertNotNull(rDFDataset_IRI0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal(">2/%c/,$yr_VS=4qf5", "", "");
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_IRI0, rDFDataset_BlankNode0, rDFDataset_Literal0, "");
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(biFunction0).apply(any() , any());
      rDFDataset_Literal0.replaceAll(biFunction0);
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      
      String string0 = "|)5_RNM";
      Object object0 = rDFDataset_Literal0.putIfAbsent("|)5_RNM", rDFDataset_Quad0);
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(5, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNull(object0);
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)rDFDataset_Quad0.entrySet();
      assertEquals(2, rDFDataset_IRI0.size());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(5, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "dH>Q(3Gj@Bz($?IRVl5", "\b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("]W'S", "]W'S", "", "", "", "{{");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = rDFDataset_Quad0.put("://", object0);
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object1);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, (String) null, "]W'S");
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("<]W'S> <]W'S> \"\"^^<> .\n", string0);
      
      String string1 = RDFDatasetUtils.unescape("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1247);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1247, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1247, charBuffer0.capacity());
      assertEquals(1247, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1247, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1247, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1247, charBuffer0.capacity());
      assertEquals(1247, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1247, charBuffer0.remaining());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1247, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1247, charBuffer0.capacity());
      assertEquals(1247, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1247, charBuffer0.remaining());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.delete(1247, 1247);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1247, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1247, charBuffer0.capacity());
      assertEquals(1247, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1247, charBuffer0.remaining());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads((RDFDataset) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        RDFDatasetUtils.parseNQuads((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1210);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 1210);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("1210", stringBuilder0.toString());
      assertEquals("1210", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      RDFDatasetUtils.escape("$Fp~s!+vRdP.Fn>2", stringBuilder1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("1210$Fp~s!+vRdP.Fn\\u007f>2", stringBuilder0.toString());
      assertEquals("1210$Fp~s!+vRdP.Fn\\u007f>2", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", "", ":bwJXT),Kl+y", ";|-D)^;UHOES", (String) null, "3");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      Integer integer0 = new Integer(3130);
      assertNotNull(integer0);
      assertEquals(3130, (int)integer0);
      
      Object object0 = rDFDataset_Quad0.put("", integer0);
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(5, rDFDataset_Quad0.size());
      assertNull(object0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "", "^vc ?.1#^QN,&d", stringBuilder0);
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(5, rDFDataset_Quad0.size());
      assertEquals("<> <> \":bwJXT),Kl+y\"^^<;|-D)^;UHOES> <> .\n", stringBuilder0.toString());
      
      RDFDataset rDFDataset0 = RDFDatasetUtils.parseNQuads("");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      String string0 = RDFDatasetUtils.unescape("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RDFDataset rDFDataset0 = new RDFDataset();
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string0 = "B:*P";
      Object object0 = rDFDataset0.put("B:*P", "B:*P");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset0.size());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.RDFDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = RDFDatasetUtils.unescape((String) null);
      assertNull(string0);
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions((String) null);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi(jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNull(jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi();
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      Object object0 = rDFDataset0.put((String) null, (Object) null);
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNull(object0);
      
      String string0 = RDFDatasetUtils.unescape((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RDFDataset rDFDataset0 = new RDFDataset();
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      RDFDatasetUtils.toNQuads(rDFDataset0, stringBuilder1);
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RDFDataset rDFDataset0 = new RDFDataset((JsonLdApi) null);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("\f");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, "\f");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      Object object0 = rDFDataset_Quad0.put((String) null, rDFDataset0);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object0);
      
      Object object1 = rDFDataset0.put("NrL", rDFDataset_Quad0);
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object1);
      
      StringBuilder stringBuilder0 = new StringBuilder(9);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = "";
      Object object2 = rDFDataset0.put("", "");
      assertEquals(3, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNull(object2);
      
      String string1 = "e8e";
      StringBuffer stringBuffer0 = new StringBuffer("e8e");
      assertEquals("e8e", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(0);
      assertEquals("e8e\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("e8e\u0000", stringBuffer1.toString());
      assertEquals(4, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("e8e\u0000", stringBuilder0.toString());
      assertEquals("e8e\u0000", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("e8e\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Object object3 = rDFDataset0.put("", stringBuilder0);
      assertFalse(object3.equals((Object)string1));
      assertTrue(object3.equals((Object)string0));
      assertEquals(3, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals("e8e\u0000", stringBuilder0.toString());
      assertNotNull(object3);
      assertEquals("", object3);
      assertSame(stringBuilder0, stringBuilder1);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0, stringBuilder0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.github.jsonldjava.core.RDFDataset$Quad cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.RDFDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "4i{H<38QK";
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        RDFDatasetUtils.escape("4i{H<38QK", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = null;
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode((String) null);
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, (String) null);
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(3, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      Object object0 = rDFDataset_Quad0.put((String) null, (Object) null);
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNull(object0);
      
      String string1 = "|";
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, (String) null, "|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "H8]Y4", 0, 0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(2510.578885);
      assertEquals("2510.578885", stringBuilder0.toString());
      assertEquals("2510.578885", stringBuilder1.toString());
      assertEquals("2510.578885", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, 26L);
      assertEquals("262510.578885", stringBuilder0.toString());
      assertEquals("262510.578885", stringBuilder1.toString());
      assertEquals("262510.578885", stringBuilder2.toString());
      assertEquals("262510.578885", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad((RDFDataset.Quad) null, "+!QkTM(ht", "H8]Y4", stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RDFDataset rDFDataset0 = null;
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads((RDFDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("Z=9JxF2#", "Z=9JxF2#", "Ier;Qmx`qV)5#.6\"O/A", "R@~^(7]");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "R@~^(7]", "");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("<Z=9JxF2#> <Z=9JxF2#> <Ier;Qmx`qV)5#.6\\\"O/A> <R@~^(\\u007f7]> .\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-1059));
      assertNotNull(integer0);
      assertEquals((-1059), (int)integer0);
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("@graph");
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("@graph", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi(integer0, "", jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("@graph", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("@graph", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string0 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertEquals("@graph", jsonLdOptions0.getBase());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RDFDataset.Node rDFDataset_Node0 = null;
      String string0 = "38Sf ?C`r@ Q&@";
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad((RDFDataset.Node) null, (RDFDataset.Node) null, (RDFDataset.Node) null, "38Sf ?C`r@ Q&@");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.compareUnsigned(0, 0);
      assertEquals(0, int0);
      
      int int1 = Integer.max(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = rDFDataset_Quad0.remove((Object) integer0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertFalse(boolean0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "BloomFilters must have the same number of hash functions (%s != %s)";
      try { 
        RDFDatasetUtils.parseNQuads("BloomFilters must have the same number of hash functions (%s != %s)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000002
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("invalid language-tagged value");
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, "");
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "", "invalid language-tagged value");
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("_:a invalid language-tagged value _:a <> .\n", string0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi();
      assertNotNull(jsonLdApi0);
      
      // Undeclared exception!
      try { 
        jsonLdApi0.toRDF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("CYCLIC_IRI_MAPPING");
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode1 = new RDFDataset.BlankNode("\"");
      assertFalse(rDFDataset_BlankNode1.equals((Object)rDFDataset_BlankNode0));
      assertTrue(rDFDataset_BlankNode1.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode1.size());
      assertFalse(rDFDataset_BlankNode1.isIRI());
      assertFalse(rDFDataset_BlankNode1.isEmpty());
      assertFalse(rDFDataset_BlankNode1.isLiteral());
      assertNotNull(rDFDataset_BlankNode1);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode1, "\r");
      assertFalse(rDFDataset_BlankNode0.equals((Object)rDFDataset_BlankNode1));
      assertFalse(rDFDataset_BlankNode1.equals((Object)rDFDataset_BlankNode0));
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode1.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode1.size());
      assertFalse(rDFDataset_BlankNode1.isIRI());
      assertFalse(rDFDataset_BlankNode1.isEmpty());
      assertFalse(rDFDataset_BlankNode1.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertFalse(rDFDataset_BlankNode0.equals((Object)rDFDataset_BlankNode1));
      assertFalse(rDFDataset_BlankNode1.equals((Object)rDFDataset_BlankNode0));
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode1.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode1.size());
      assertFalse(rDFDataset_BlankNode1.isIRI());
      assertFalse(rDFDataset_BlankNode1.isEmpty());
      assertFalse(rDFDataset_BlankNode1.isLiteral());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("CYCLIC_IRI_MAPPING CYCLIC_IRI_MAPPING \" <> .\n", string0);
      assertNotSame(rDFDataset_BlankNode0, rDFDataset_BlankNode1);
      assertNotSame(rDFDataset_BlankNode1, rDFDataset_BlankNode0);
      
      try { 
        RDFDatasetUtils.parseNQuads("{4}))|(?:U(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000007
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        RDFDatasetUtils.parseNQuads("z))TjaP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000002
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RDFDataset rDFDataset0 = RDFDatasetUtils.parseNQuads("");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "'xJod(di6&c?T";
      int int0 = 80;
      StringBuilder stringBuilder0 = new StringBuilder(80);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = (-469);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'e';
      charArray0[2] = 'd';
      charArray0[3] = '9';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-469), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -469
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode("CYCLIC_IRI_MAPPING");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, "\"");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("CYCLIC_IRI_MAPPING CYCLIC_IRI_MAPPING CYCLIC_IRI_MAPPING <> .\n", string0);
      
      try { 
        RDFDatasetUtils.parseNQuads("{4}))|(?:U(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: java.lang.String@0000000006
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("_4^JkS_", "", "m");
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("_4^JkS_", "m", "_4^JkS_", "m");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string0);
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <> .\n", string0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "<_4^JkS_> <m> <_4^JkS_> <> .\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string1);
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\\n> .\n", string1);
      
      String string2 = RDFDatasetUtils.unescape("m");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("m", string2);
      
      RDFDataset rDFDataset0 = new RDFDataset();
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\n> .\n");
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\n> .\n", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuads(rDFDataset0, stringBuilder0);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\n> .\n", stringBuilder0.toString());
      
      RDFDatasetUtils.escape("m", stringBuilder0);
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\n> .\nm", stringBuilder0.toString());
      
      String string3 = RDFDatasetUtils.unescape("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      rDFDataset0.addQuad("V6g>Lsae87B", "", "Q ~0M%*BZH%$sKn46W/", "<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\n> .\n", "h]6_LIjD:iWO55pl", "_4^JkS_");
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      
      StringBuilder stringBuilder1 = stringBuilder0.replace(0, 56320, "\u0001eoH8lg$T");
      assertEquals("\u0001eoH8lg$T", stringBuilder0.toString());
      assertEquals("\u0001eoH8lg$T", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string4 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(string4);
      assertEquals("<V6\\u007fg>Lsae87B> <> \"Q ~0M%*BZH%$sKn46W/\"^^<<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\\n> .\\n> <_4^JkS_> .\n", string4);
      
      StringBuilder stringBuilder2 = stringBuilder0.appendCodePoint(2775);
      assertEquals("\u0001eoH8lg$T\u0AD7", stringBuilder0.toString());
      assertEquals("\u0001eoH8lg$T\u0AD7", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      String string5 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "", "m");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string5);
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <> .\n", string5);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "", (String) null, stringBuilder0);
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals("\u0001eoH8lg$T\u0AD7<_4^JkS_> <m> <_4^JkS_> <> .\n", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      
      String string6 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "<_4^JkS_> <m> <_4^JkS_> <> .\n");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(string6);
      assertEquals("<_4^JkS_> <m> <_4^JkS_> <<_4^JkS_> <m> <_4^JkS_> <> .\\n> .\n", string6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "m";
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("_4^JkS_", "", "m");
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "m");
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string1 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string1);
      assertEquals("_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <> .\n", string1);
      
      String string2 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <> .\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string2);
      assertEquals("_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <_4^JkS_ _4^JkS_ \\\"_4^JkS_\\\"^^<> <> .\\n> .\n", string2);
      
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <> .\n> .\n", "_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <> .\n> .\n");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertEquals(4, rDFDataset_Literal0.size());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string3);
      assertEquals("_:z _4^JkS_ \"_4^JkS_\"^^<> <_4^JkS_ _4^JkS_ \\\"_4^JkS_\\\"^^<> <_4^JkS_ _4^JkS_ \\\"_4^JkS_\\\"^^<> <> .\\n> .\\n> .\n", string3);
      
      RDFDataset rDFDataset0 = new RDFDataset();
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = rDFDataset0.put("LiQ<wg|Rk", object0);
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(2, rDFDataset0.size());
      assertNull(object1);
      
      rDFDataset0.addQuad("V6g>Lsae87B", "", "Q ~0M%*BZH%$sKn46W/", "_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <_4^JkS_ _4^JkS_ \"_4^JkS_\"^^<> <> .\n> .\n", "h]6_LIjD:iWO55pl", "_4^JkS_");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(3, rDFDataset0.size());
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuads(rDFDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.List
         //
         verifyException("com.github.jsonldjava.core.RDFDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", "", "", "");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "0Zq\"`&9tb%!");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(string0);
      assertEquals("<> <> <> <0Zq\\\"`&9tb%!> .\n", string0);
      
      String string1 = RDFDatasetUtils.unescape("hR'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hR'", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder(41);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(41);
      assertEquals(")", stringBuilder0.toString());
      assertEquals(")", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(351);
      assertEquals(")\u015F", stringBuilder0.toString());
      assertEquals(")\u015F", stringBuilder1.toString());
      assertEquals(")\u015F", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder1.append("");
      assertEquals(")\u015F", stringBuilder0.toString());
      assertEquals(")\u015F", stringBuilder1.toString());
      assertEquals(")\u015F", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((double) 41);
      assertEquals(")\u015F41.0", stringBuilder0.toString());
      assertEquals(")\u015F41.0", stringBuilder1.toString());
      assertEquals(")\u015F41.0", stringBuilder3.toString());
      assertEquals(")\u015F41.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      
      RDFDatasetUtils.escape("hR'", stringBuilder3);
      assertEquals(")\u015F41.0h\\u007fR'", stringBuilder0.toString());
      assertEquals(")\u015F41.0h\\u007fR'", stringBuilder1.toString());
      assertEquals(")\u015F41.0h\\u007fR'", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad("", "<r.8$KW,<LY#", "", "<r.8$KW,<LY#");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(4, rDFDataset_Quad1.size());
      assertNotNull(rDFDataset_Quad1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = rDFDataset_Quad1.put("com.google.common.collect.DiscreteDomain$IntegerDomain", object0);
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(5, rDFDataset_Quad1.size());
      assertNull(object1);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string2 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "hR'");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(5, rDFDataset_Quad1.size());
      assertNotNull(string2);
      assertEquals("<> <<r.8$KW,<LY#> <> <h\\u007fR'> .\n", string2);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string3 = RDFDatasetUtils.unescape("^^<");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("^^<", string3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RDFDataset rDFDataset0 = new RDFDataset();
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string0 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = null;
      String string2 = "$}nXY;\"\\Y0$qJ";
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("", (String) null, "IM5mdmV/Yg]", "The offset cannot be negative", "$}nXY;\"Y0$qJ", "");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = (-2749);
      char char0 = 'm';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2749), 'm');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = RDFDatasetUtils.unescape("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("@index", "9=6]h!&vjL", "\r");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.IRI rDFDataset_IRI0 = new RDFDataset.IRI("\r");
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertEquals(2, rDFDataset_IRI0.size());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertNotNull(rDFDataset_IRI0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_IRI0, rDFDataset_IRI0, "=z9");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_IRI0.isLiteral());
      assertFalse(rDFDataset_IRI0.isBlankNode());
      assertTrue(rDFDataset_IRI0.isIRI());
      assertEquals(2, rDFDataset_IRI0.size());
      assertFalse(rDFDataset_IRI0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      RDFDataset.Literal rDFDataset_Literal1 = new RDFDataset.Literal("com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.BloomFilterStrategies", "N");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertNotNull(rDFDataset_Literal1);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad(rDFDataset_Literal1, rDFDataset_Literal1, rDFDataset_Literal1, "com.google.common.hash.BloomFilterStrategies");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(4, rDFDataset_Quad1.size());
      assertNotNull(rDFDataset_Quad1);
      
      StringBuilder stringBuilder0 = new StringBuilder(34);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "#}l>.FjZ8oj1", "", stringBuilder0);
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(4, rDFDataset_Quad1.size());
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <#}l>.FjZ8oj1> .\n", stringBuilder0.toString());
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      String string1 = RDFDatasetUtils.unescape("com.google.common.hash.Funnels$IntegerFunnel");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.google.common.hash.Funnels$IntegerFunnel", string1);
      
      String string2 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, "8V|~gmF'wmlW.{],", "d0+eN");
      assertFalse(rDFDataset_Literal1.equals((Object)rDFDataset_Literal0));
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(rDFDataset_Literal1.isBlankNode());
      assertFalse(rDFDataset_Literal1.isEmpty());
      assertEquals(4, rDFDataset_Literal1.size());
      assertFalse(rDFDataset_Literal1.isIRI());
      assertTrue(rDFDataset_Literal1.isLiteral());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertEquals(4, rDFDataset_Quad1.size());
      assertNotNull(string2);
      assertEquals("_:z com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <8V|~gmF'wmlW.{],> .\n", string2);
      assertNotSame(rDFDataset_Literal1, rDFDataset_Literal0);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = RDFDatasetUtils.unescape("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal("com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.BloomFilterStrategies", "N");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "com.google.common.hash.BloomFilterStrategies");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      StringBuilder stringBuilder0 = new StringBuilder(37);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "',<&dhrG7vQ", "com.google.common.hash.Funnels$IntegerFunnel", stringBuilder0);
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals("_:a com.google.common.hash.Funnels$IntegerFunnel \"com.google.common.hash.Funnels$IntegerFunnel\"^^<com.google.common.hash.BloomFilterStrategies> <',<&dhrG7vQ> .\n", stringBuilder0.toString());
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions();
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi("',<&dhrG7vQ", "N", jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getRequireAll());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertEquals("", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertNull(jsonLdOptions0.getExplicit());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertNotNull(jsonLdApi0);
      
      // Undeclared exception!
      try { 
        jsonLdApi0.toRDF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.JsonLdApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RDFDataset.BlankNode rDFDataset_BlankNode0 = new RDFDataset.BlankNode((String) null);
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertNotNull(rDFDataset_BlankNode0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_BlankNode0, rDFDataset_BlankNode0, rDFDataset_BlankNode0, (String) null);
      assertTrue(rDFDataset_BlankNode0.isBlankNode());
      assertEquals(2, rDFDataset_BlankNode0.size());
      assertFalse(rDFDataset_BlankNode0.isEmpty());
      assertFalse(rDFDataset_BlankNode0.isLiteral());
      assertFalse(rDFDataset_BlankNode0.isIRI());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(3, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      StringBuilder stringBuilder0 = new StringBuilder("fljjm,569Gv");
      assertEquals("fljjm,569Gv", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = RDFDatasetUtils.unescape("\\(?:([tbnrf\"'])|(?:u(");
      assertNotNull(string0);
      assertEquals("\\(?:([tbnrf\"'])|(?:u(", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      RDFDataset rDFDataset0 = RDFDatasetUtils.parseNQuads("");
      assertFalse(rDFDataset0.isEmpty());
      assertEquals(1, rDFDataset0.size());
      assertNotNull(rDFDataset0);
      
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      String string1 = "";
      RDFDataset.Literal rDFDataset_Literal0 = new RDFDataset.Literal((String) null, "", "");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertNotNull(rDFDataset_Literal0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad(rDFDataset_Literal0, rDFDataset_Literal0, rDFDataset_Literal0, "\\");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertEquals(4, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNotNull(rDFDataset_Quad0);
      
      String string2 = "]A*w'm,&x@";
      Object object0 = rDFDataset_Quad0.put("h;&>(3*c+dz", "]A*w'm,&x@");
      assertEquals(4, rDFDataset_Literal0.size());
      assertFalse(rDFDataset_Literal0.isBlankNode());
      assertFalse(rDFDataset_Literal0.isEmpty());
      assertFalse(rDFDataset_Literal0.isIRI());
      assertTrue(rDFDataset_Literal0.isLiteral());
      assertEquals(5, rDFDataset_Quad0.size());
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertNull(object0);
      
      RDFDataset.Quad rDFDataset_Quad1 = new RDFDataset.Quad("\\", "h;&>(3*c+dz", "]A*w'm,&x@", "");
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(rDFDataset_Quad1);
      
      String string3 = RDFDatasetUtils.toNQuad(rDFDataset_Quad1, (String) null);
      assertFalse(rDFDataset_Quad1.equals((Object)rDFDataset_Quad0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, rDFDataset_Quad1.size());
      assertFalse(rDFDataset_Quad1.isEmpty());
      assertNotNull(string3);
      assertEquals("<\\\\> <h;&>(3*c+dz> <]A*w'm,&x@> .\n", string3);
      assertNotSame(rDFDataset_Quad1, rDFDataset_Quad0);
      
      // Undeclared exception!
      try { 
        RDFDatasetUtils.toNQuad(rDFDataset_Quad0, "h;&>(3*c+dz", "\\");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.jsonldjava.core.RDFDatasetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RDFDatasetUtils.escape("", (StringBuilder) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonLdOptions jsonLdOptions0 = new JsonLdOptions("2zHz{A_5>o");
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNotNull(jsonLdOptions0);
      
      JsonLdApi jsonLdApi0 = new JsonLdApi(object0, jsonLdOptions0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertNotNull(jsonLdApi0);
      
      RDFDataset rDFDataset0 = new RDFDataset(jsonLdApi0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(rDFDataset0);
      
      String string0 = RDFDatasetUtils.toNQuads(rDFDataset0);
      assertTrue(JsonLdOptions.DEFAULT_COMPACT_ARRAYS);
      assertFalse(jsonLdOptions0.getProduceGeneralizedRdf());
      assertEquals("2zHz{A_5>o", jsonLdOptions0.getBase());
      assertTrue(jsonLdOptions0.getCompactArrays());
      assertFalse(jsonLdOptions0.getUseRdfType());
      assertFalse(jsonLdOptions0.getFrameExpansion());
      assertNull(jsonLdOptions0.getExplicit());
      assertFalse(jsonLdOptions0.getAllowContainerSetOnType());
      assertFalse(jsonLdOptions0.getOmitGraph());
      assertFalse(jsonLdOptions0.getRequireAll());
      assertNull(jsonLdOptions0.getOmitDefault());
      assertEquals("json-ld-1.0", jsonLdOptions0.getProcessingMode());
      assertFalse(jsonLdOptions0.getPruneBlankNodeIdentifiers());
      assertFalse(jsonLdOptions0.getUseNativeTypes());
      assertEquals(1, rDFDataset0.size());
      assertFalse(rDFDataset0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RDFDatasetUtils rDFDatasetUtils0 = new RDFDatasetUtils();
      assertNotNull(rDFDatasetUtils0);
      
      RDFDataset.Quad rDFDataset_Quad0 = new RDFDataset.Quad("rEt?q*WqV=$8^cK_c", "U=!Br$", "U=!Br$", "rEt?q*WqV=$8^cK_c");
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      assertNotNull(rDFDataset_Quad0);
      
      String string0 = ".]}1{%pG>:I%txOh}H";
      String string1 = "\\b";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(biFunction0).apply(any() , any());
      rDFDataset_Quad0.replaceAll(biFunction0);
      assertFalse(rDFDataset_Quad0.isEmpty());
      assertEquals(4, rDFDataset_Quad0.size());
      
      String string2 = RDFDatasetUtils.unescape("\b");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\b", string2);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-3023), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3023
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
